// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/wrappers.proto
/* eslint-disable */

import type { ByteSource } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  encodeBase64Bytes,
  decodeBase64Bytes,
} from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 */
export interface DoubleValue {
  /**
   * The double value.
   */
  value: number;
}

/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 */
export interface FloatValue {
  /**
   * The float value.
   */
  value: number;
}

/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 */
export interface Int64Value {
  /**
   * The int64 value.
   */
  value: bigint;
}

/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 */
export interface UInt64Value {
  /**
   * The uint64 value.
   */
  value: bigint;
}

/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 */
export interface Int32Value {
  /**
   * The int32 value.
   */
  value: number;
}

/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 */
export interface UInt32Value {
  /**
   * The uint32 value.
   */
  value: number;
}

/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 */
export interface BoolValue {
  /**
   * The bool value.
   */
  value: boolean;
}

/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 */
export interface StringValue {
  /**
   * The string value.
   */
  value: string;
}

/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 */
export interface BytesValue {
  /**
   * The bytes value.
   */
  value: Uint8Array;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const DoubleValue = {
  /**
   * Serializes DoubleValue to protobuf.
   */
  encode: function (msg: Partial<DoubleValue>): Uint8Array {
    return DoubleValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes DoubleValue from protobuf.
   */
  decode: function (bytes: ByteSource): DoubleValue {
    return DoubleValue._readMessage(
      DoubleValue.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes DoubleValue with all fields set to their default value.
   */
  initialize: function (): DoubleValue {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<DoubleValue>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeDouble(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DoubleValue, reader: BinaryReader): DoubleValue {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readDouble();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const FloatValue = {
  /**
   * Serializes FloatValue to protobuf.
   */
  encode: function (msg: Partial<FloatValue>): Uint8Array {
    return FloatValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes FloatValue from protobuf.
   */
  decode: function (bytes: ByteSource): FloatValue {
    return FloatValue._readMessage(
      FloatValue.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes FloatValue with all fields set to their default value.
   */
  initialize: function (): FloatValue {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<FloatValue>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeFloat(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FloatValue, reader: BinaryReader): FloatValue {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readFloat();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Int64Value = {
  /**
   * Serializes Int64Value to protobuf.
   */
  encode: function (msg: Partial<Int64Value>): Uint8Array {
    return Int64Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Int64Value from protobuf.
   */
  decode: function (bytes: ByteSource): Int64Value {
    return Int64Value._readMessage(
      Int64Value.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Int64Value with all fields set to their default value.
   */
  initialize: function (): Int64Value {
    return {
      value: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Int64Value>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeInt64String(1, msg.value.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Int64Value, reader: BinaryReader): Int64Value {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UInt64Value = {
  /**
   * Serializes UInt64Value to protobuf.
   */
  encode: function (msg: Partial<UInt64Value>): Uint8Array {
    return UInt64Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes UInt64Value from protobuf.
   */
  decode: function (bytes: ByteSource): UInt64Value {
    return UInt64Value._readMessage(
      UInt64Value.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UInt64Value with all fields set to their default value.
   */
  initialize: function (): UInt64Value {
    return {
      value: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UInt64Value>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeUint64String(1, msg.value.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UInt64Value, reader: BinaryReader): UInt64Value {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = BigInt(reader.readUint64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Int32Value = {
  /**
   * Serializes Int32Value to protobuf.
   */
  encode: function (msg: Partial<Int32Value>): Uint8Array {
    return Int32Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Int32Value from protobuf.
   */
  decode: function (bytes: ByteSource): Int32Value {
    return Int32Value._readMessage(
      Int32Value.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Int32Value with all fields set to their default value.
   */
  initialize: function (): Int32Value {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Int32Value>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeInt32(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Int32Value, reader: BinaryReader): Int32Value {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readInt32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UInt32Value = {
  /**
   * Serializes UInt32Value to protobuf.
   */
  encode: function (msg: Partial<UInt32Value>): Uint8Array {
    return UInt32Value._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes UInt32Value from protobuf.
   */
  decode: function (bytes: ByteSource): UInt32Value {
    return UInt32Value._readMessage(
      UInt32Value.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UInt32Value with all fields set to their default value.
   */
  initialize: function (): UInt32Value {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UInt32Value>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeUint32(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UInt32Value, reader: BinaryReader): UInt32Value {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readUint32();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const BoolValue = {
  /**
   * Serializes BoolValue to protobuf.
   */
  encode: function (msg: Partial<BoolValue>): Uint8Array {
    return BoolValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes BoolValue from protobuf.
   */
  decode: function (bytes: ByteSource): BoolValue {
    return BoolValue._readMessage(
      BoolValue.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes BoolValue with all fields set to their default value.
   */
  initialize: function (): BoolValue {
    return {
      value: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<BoolValue>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeBool(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BoolValue, reader: BinaryReader): BoolValue {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const StringValue = {
  /**
   * Serializes StringValue to protobuf.
   */
  encode: function (msg: Partial<StringValue>): Uint8Array {
    return StringValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes StringValue from protobuf.
   */
  decode: function (bytes: ByteSource): StringValue {
    return StringValue._readMessage(
      StringValue.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes StringValue with all fields set to their default value.
   */
  initialize: function (): StringValue {
    return {
      value: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<StringValue>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value) {
      writer.writeString(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: StringValue, reader: BinaryReader): StringValue {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const BytesValue = {
  /**
   * Serializes BytesValue to protobuf.
   */
  encode: function (msg: Partial<BytesValue>): Uint8Array {
    return BytesValue._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes BytesValue from protobuf.
   */
  decode: function (bytes: ByteSource): BytesValue {
    return BytesValue._readMessage(
      BytesValue.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes BytesValue with all fields set to their default value.
   */
  initialize: function (): BytesValue {
    return {
      value: new Uint8Array(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<BytesValue>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.value?.length) {
      writer.writeBytes(1, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BytesValue, reader: BinaryReader): BytesValue {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.value = reader.readBytes();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const DoubleValueJSON = {
  /**
   * Serializes DoubleValue to JSON.
   */
  encode: function (msg: Partial<DoubleValue>): string {
    return JSON.stringify(DoubleValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes DoubleValue from JSON.
   */
  decode: function (json: string): DoubleValue {
    return DoubleValueJSON._readMessage(
      DoubleValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes DoubleValue with all fields set to their default value.
   */
  initialize: function (): DoubleValue {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<DoubleValue>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: DoubleValue, json: any): DoubleValue {
    const _value = json.value;
    if (_value) {
      msg.value = _value;
    }
    return msg;
  },
};

export const FloatValueJSON = {
  /**
   * Serializes FloatValue to JSON.
   */
  encode: function (msg: Partial<FloatValue>): string {
    return JSON.stringify(FloatValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes FloatValue from JSON.
   */
  decode: function (json: string): FloatValue {
    return FloatValueJSON._readMessage(
      FloatValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes FloatValue with all fields set to their default value.
   */
  initialize: function (): FloatValue {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<FloatValue>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: FloatValue, json: any): FloatValue {
    const _value = json.value;
    if (_value) {
      msg.value = _value;
    }
    return msg;
  },
};

export const Int64ValueJSON = {
  /**
   * Serializes Int64Value to JSON.
   */
  encode: function (msg: Partial<Int64Value>): string {
    return JSON.stringify(Int64ValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes Int64Value from JSON.
   */
  decode: function (json: string): Int64Value {
    return Int64ValueJSON._readMessage(
      Int64ValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Int64Value with all fields set to their default value.
   */
  initialize: function (): Int64Value {
    return {
      value: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Int64Value>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Int64Value, json: any): Int64Value {
    const _value = json.value;
    if (_value) {
      msg.value = BigInt(_value);
    }
    return msg;
  },
};

export const UInt64ValueJSON = {
  /**
   * Serializes UInt64Value to JSON.
   */
  encode: function (msg: Partial<UInt64Value>): string {
    return JSON.stringify(UInt64ValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes UInt64Value from JSON.
   */
  decode: function (json: string): UInt64Value {
    return UInt64ValueJSON._readMessage(
      UInt64ValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UInt64Value with all fields set to their default value.
   */
  initialize: function (): UInt64Value {
    return {
      value: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<UInt64Value>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UInt64Value, json: any): UInt64Value {
    const _value = json.value;
    if (_value) {
      msg.value = BigInt(_value);
    }
    return msg;
  },
};

export const Int32ValueJSON = {
  /**
   * Serializes Int32Value to JSON.
   */
  encode: function (msg: Partial<Int32Value>): string {
    return JSON.stringify(Int32ValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes Int32Value from JSON.
   */
  decode: function (json: string): Int32Value {
    return Int32ValueJSON._readMessage(
      Int32ValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Int32Value with all fields set to their default value.
   */
  initialize: function (): Int32Value {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Int32Value>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Int32Value, json: any): Int32Value {
    const _value = json.value;
    if (_value) {
      msg.value = _value;
    }
    return msg;
  },
};

export const UInt32ValueJSON = {
  /**
   * Serializes UInt32Value to JSON.
   */
  encode: function (msg: Partial<UInt32Value>): string {
    return JSON.stringify(UInt32ValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes UInt32Value from JSON.
   */
  decode: function (json: string): UInt32Value {
    return UInt32ValueJSON._readMessage(
      UInt32ValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UInt32Value with all fields set to their default value.
   */
  initialize: function (): UInt32Value {
    return {
      value: 0,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<UInt32Value>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UInt32Value, json: any): UInt32Value {
    const _value = json.value;
    if (_value) {
      msg.value = _value;
    }
    return msg;
  },
};

export const BoolValueJSON = {
  /**
   * Serializes BoolValue to JSON.
   */
  encode: function (msg: Partial<BoolValue>): string {
    return JSON.stringify(BoolValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes BoolValue from JSON.
   */
  decode: function (json: string): BoolValue {
    return BoolValueJSON._readMessage(
      BoolValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes BoolValue with all fields set to their default value.
   */
  initialize: function (): BoolValue {
    return {
      value: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<BoolValue>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BoolValue, json: any): BoolValue {
    const _value = json.value;
    if (_value) {
      msg.value = _value;
    }
    return msg;
  },
};

export const StringValueJSON = {
  /**
   * Serializes StringValue to JSON.
   */
  encode: function (msg: Partial<StringValue>): string {
    return JSON.stringify(StringValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes StringValue from JSON.
   */
  decode: function (json: string): StringValue {
    return StringValueJSON._readMessage(
      StringValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes StringValue with all fields set to their default value.
   */
  initialize: function (): StringValue {
    return {
      value: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<StringValue>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value) {
      json.value = msg.value;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: StringValue, json: any): StringValue {
    const _value = json.value;
    if (_value) {
      msg.value = _value;
    }
    return msg;
  },
};

export const BytesValueJSON = {
  /**
   * Serializes BytesValue to JSON.
   */
  encode: function (msg: Partial<BytesValue>): string {
    return JSON.stringify(BytesValueJSON._writeMessage(msg));
  },

  /**
   * Deserializes BytesValue from JSON.
   */
  decode: function (json: string): BytesValue {
    return BytesValueJSON._readMessage(
      BytesValueJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes BytesValue with all fields set to their default value.
   */
  initialize: function (): BytesValue {
    return {
      value: new Uint8Array(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<BytesValue>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.value?.length) {
      json.value = encodeBase64Bytes(msg.value);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: BytesValue, json: any): BytesValue {
    const _value = json.value;
    if (_value) {
      msg.value = decodeBase64Bytes(_value);
    }
    return msg;
  },
};
