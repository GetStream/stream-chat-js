// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: chat/v2/user.proto
/* eslint-disable */

import type { ByteSource } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  encodeBase64Bytes,
  decodeBase64Bytes,
} from "twirpscript";

import { Timestamp, TimestampJSON } from "../../google/protobuf/timestamp.pb";
import { BoolValue, BoolValueJSON } from "../../google/protobuf/wrappers.pb";

//========================================//
//                 Types                  //
//========================================//

export type PushProvider =
  | "PUSH_PROVIDER_UNSPECIFIED"
  | "PUSH_PROVIDER_FIREBASE"
  | "PUSH_PROVIDER_APN"
  | "PUSH_PROVIDER_HUAWEI"
  | "PUSH_PROVIDER_XIAOMI";

/**
 * Chat user model
 */
export interface User {
  /**
   * Unique identifier of the User.
   */
  id: string;
  /**
   * User's role in the permission system.
   */
  role: string;
  /**
   * Contains information about user's online status.
   */
  onlineStatus: UserOnlineStatus;
  /**
   * Contains information about user's ban status.
   */
  ban: UserBanStatus;
  /**
   * List of teams user is a part of.
   */
  teams: string[];
  /**
   * Preferred language of a user.
   */
  language: string;
  /**
   * custom is a JSON object which contains any user data.
   * in JSON encoded messages it will be represented as base64 encoded bytes
   */
  custom: Uint8Array;
  /**
   * Date of creation of the user.
   */
  createdAt: Timestamp;
  /**
   * Date of last update of user's data.
   */
  updatedAt: Timestamp;
  /**
   * Date of deletion of the user.
   */
  deletedAt: Timestamp;
  /**
   * Date of deactivation of the user.
   */
  deactivatedAt: Timestamp;
}

/**
 * Contains information about user's online status.
 */
export interface UserOnlineStatus {
  /**
   * Whether the user is online.
   */
  online: boolean;
  /**
   * Timestamp of the last activity.
   */
  lastActiveAt: Timestamp;
  /**
   * Invisibility condition of the user.
   * Setting this field to true will cause the user to be marked as offline
   * This field is not visible to other users
   */
  invisible: BoolValue;
}

/**
 * Contains information about user's ban status.
 */
export interface UserBanStatus {
  /**
   * Whether the user is banned.
   */
  banned: boolean;
  /**
   * Time when the user will be unbanned.
   */
  banExpiresAt: Timestamp;
}

export interface UserOwnView {
  user: User;
  pushSettings: UserPushNotificationsSettings;
  unread: UserUnreadStatus;
}

export interface UserSettings {
  push: UserPushNotificationsSettings;
}

export interface UserPushNotificationsSettings {
  disabled: boolean;
  disabledUntil: Timestamp;
  devices: UserPushDevice[];
}

export interface UserPushDevice {
  id: string;
  pushProvider: PushProvider;
  pushProviderName: string;
}

export interface UserUnreadStatus {
  unreadMessageCount: bigint;
  unreadChannelsCount: bigint;
}

/**
 * TODO: Q/A Do we need these data below?
 *
 */
export interface UserLatest {}

export interface UserMute {}

export interface UserChannelMute {}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const PushProvider = {
  PUSH_PROVIDER_UNSPECIFIED: "PUSH_PROVIDER_UNSPECIFIED",
  PUSH_PROVIDER_FIREBASE: "PUSH_PROVIDER_FIREBASE",
  PUSH_PROVIDER_APN: "PUSH_PROVIDER_APN",
  PUSH_PROVIDER_HUAWEI: "PUSH_PROVIDER_HUAWEI",
  PUSH_PROVIDER_XIAOMI: "PUSH_PROVIDER_XIAOMI",
  /**
   * @private
   */
  _fromInt: function (i: number): PushProvider {
    switch (i) {
      case 0: {
        return "PUSH_PROVIDER_UNSPECIFIED";
      }
      case 1: {
        return "PUSH_PROVIDER_FIREBASE";
      }
      case 2: {
        return "PUSH_PROVIDER_APN";
      }
      case 3: {
        return "PUSH_PROVIDER_HUAWEI";
      }
      case 4: {
        return "PUSH_PROVIDER_XIAOMI";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as PushProvider;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: PushProvider): number {
    switch (i) {
      case "PUSH_PROVIDER_UNSPECIFIED": {
        return 0;
      }
      case "PUSH_PROVIDER_FIREBASE": {
        return 1;
      }
      case "PUSH_PROVIDER_APN": {
        return 2;
      }
      case "PUSH_PROVIDER_HUAWEI": {
        return 3;
      }
      case "PUSH_PROVIDER_XIAOMI": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const User = {
  /**
   * Serializes User to protobuf.
   */
  encode: function (msg: Partial<User>): Uint8Array {
    return User._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes User from protobuf.
   */
  decode: function (bytes: ByteSource): User {
    return User._readMessage(User.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (): User {
    return {
      id: "",
      role: "",
      onlineStatus: UserOnlineStatus.initialize(),
      ban: UserBanStatus.initialize(),
      teams: [],
      language: "",
      custom: new Uint8Array(),
      createdAt: Timestamp.initialize(),
      updatedAt: Timestamp.initialize(),
      deletedAt: Timestamp.initialize(),
      deactivatedAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<User>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.role) {
      writer.writeString(2, msg.role);
    }
    if (msg.onlineStatus) {
      writer.writeMessage(3, msg.onlineStatus, UserOnlineStatus._writeMessage);
    }
    if (msg.ban) {
      writer.writeMessage(4, msg.ban, UserBanStatus._writeMessage);
    }
    if (msg.teams?.length) {
      writer.writeRepeatedString(5, msg.teams);
    }
    if (msg.language) {
      writer.writeString(6, msg.language);
    }
    if (msg.custom?.length) {
      writer.writeBytes(7, msg.custom);
    }
    if (msg.createdAt) {
      writer.writeMessage(8, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.updatedAt) {
      writer.writeMessage(9, msg.updatedAt, Timestamp._writeMessage);
    }
    if (msg.deletedAt) {
      writer.writeMessage(10, msg.deletedAt, Timestamp._writeMessage);
    }
    if (msg.deactivatedAt) {
      writer.writeMessage(11, msg.deactivatedAt, Timestamp._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, reader: BinaryReader): User {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.role = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.onlineStatus, UserOnlineStatus._readMessage);
          break;
        }
        case 4: {
          reader.readMessage(msg.ban, UserBanStatus._readMessage);
          break;
        }
        case 5: {
          msg.teams.push(reader.readString());
          break;
        }
        case 6: {
          msg.language = reader.readString();
          break;
        }
        case 7: {
          msg.custom = reader.readBytes();
          break;
        }
        case 8: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 9: {
          reader.readMessage(msg.updatedAt, Timestamp._readMessage);
          break;
        }
        case 10: {
          reader.readMessage(msg.deletedAt, Timestamp._readMessage);
          break;
        }
        case 11: {
          reader.readMessage(msg.deactivatedAt, Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserOnlineStatus = {
  /**
   * Serializes UserOnlineStatus to protobuf.
   */
  encode: function (msg: Partial<UserOnlineStatus>): Uint8Array {
    return UserOnlineStatus._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UserOnlineStatus from protobuf.
   */
  decode: function (bytes: ByteSource): UserOnlineStatus {
    return UserOnlineStatus._readMessage(
      UserOnlineStatus.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserOnlineStatus with all fields set to their default value.
   */
  initialize: function (): UserOnlineStatus {
    return {
      online: false,
      lastActiveAt: Timestamp.initialize(),
      invisible: BoolValue.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserOnlineStatus>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.online) {
      writer.writeBool(1, msg.online);
    }
    if (msg.lastActiveAt) {
      writer.writeMessage(2, msg.lastActiveAt, Timestamp._writeMessage);
    }
    if (msg.invisible) {
      writer.writeMessage(3, msg.invisible, BoolValue._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserOnlineStatus,
    reader: BinaryReader
  ): UserOnlineStatus {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.online = reader.readBool();
          break;
        }
        case 2: {
          reader.readMessage(msg.lastActiveAt, Timestamp._readMessage);
          break;
        }
        case 3: {
          reader.readMessage(msg.invisible, BoolValue._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserBanStatus = {
  /**
   * Serializes UserBanStatus to protobuf.
   */
  encode: function (msg: Partial<UserBanStatus>): Uint8Array {
    return UserBanStatus._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UserBanStatus from protobuf.
   */
  decode: function (bytes: ByteSource): UserBanStatus {
    return UserBanStatus._readMessage(
      UserBanStatus.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserBanStatus with all fields set to their default value.
   */
  initialize: function (): UserBanStatus {
    return {
      banned: false,
      banExpiresAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserBanStatus>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.banned) {
      writer.writeBool(1, msg.banned);
    }
    if (msg.banExpiresAt) {
      writer.writeMessage(2, msg.banExpiresAt, Timestamp._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserBanStatus,
    reader: BinaryReader
  ): UserBanStatus {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.banned = reader.readBool();
          break;
        }
        case 2: {
          reader.readMessage(msg.banExpiresAt, Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserOwnView = {
  /**
   * Serializes UserOwnView to protobuf.
   */
  encode: function (msg: Partial<UserOwnView>): Uint8Array {
    return UserOwnView._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes UserOwnView from protobuf.
   */
  decode: function (bytes: ByteSource): UserOwnView {
    return UserOwnView._readMessage(
      UserOwnView.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserOwnView with all fields set to their default value.
   */
  initialize: function (): UserOwnView {
    return {
      user: User.initialize(),
      pushSettings: UserPushNotificationsSettings.initialize(),
      unread: UserUnreadStatus.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserOwnView>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    if (msg.pushSettings) {
      writer.writeMessage(
        2,
        msg.pushSettings,
        UserPushNotificationsSettings._writeMessage
      );
    }
    if (msg.unread) {
      writer.writeMessage(3, msg.unread, UserUnreadStatus._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserOwnView, reader: BinaryReader): UserOwnView {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(
            msg.pushSettings,
            UserPushNotificationsSettings._readMessage
          );
          break;
        }
        case 3: {
          reader.readMessage(msg.unread, UserUnreadStatus._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserSettings = {
  /**
   * Serializes UserSettings to protobuf.
   */
  encode: function (msg: Partial<UserSettings>): Uint8Array {
    return UserSettings._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UserSettings from protobuf.
   */
  decode: function (bytes: ByteSource): UserSettings {
    return UserSettings._readMessage(
      UserSettings.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserSettings with all fields set to their default value.
   */
  initialize: function (): UserSettings {
    return {
      push: UserPushNotificationsSettings.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserSettings>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.push) {
      writer.writeMessage(
        2,
        msg.push,
        UserPushNotificationsSettings._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserSettings,
    reader: BinaryReader
  ): UserSettings {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 2: {
          reader.readMessage(
            msg.push,
            UserPushNotificationsSettings._readMessage
          );
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserPushNotificationsSettings = {
  /**
   * Serializes UserPushNotificationsSettings to protobuf.
   */
  encode: function (msg: Partial<UserPushNotificationsSettings>): Uint8Array {
    return UserPushNotificationsSettings._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UserPushNotificationsSettings from protobuf.
   */
  decode: function (bytes: ByteSource): UserPushNotificationsSettings {
    return UserPushNotificationsSettings._readMessage(
      UserPushNotificationsSettings.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserPushNotificationsSettings with all fields set to their default value.
   */
  initialize: function (): UserPushNotificationsSettings {
    return {
      disabled: false,
      disabledUntil: Timestamp.initialize(),
      devices: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserPushNotificationsSettings>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.disabled) {
      writer.writeBool(1, msg.disabled);
    }
    if (msg.disabledUntil) {
      writer.writeMessage(2, msg.disabledUntil, Timestamp._writeMessage);
    }
    if (msg.devices?.length) {
      writer.writeRepeatedMessage(
        3,
        msg.devices as any,
        UserPushDevice._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserPushNotificationsSettings,
    reader: BinaryReader
  ): UserPushNotificationsSettings {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.disabled = reader.readBool();
          break;
        }
        case 2: {
          reader.readMessage(msg.disabledUntil, Timestamp._readMessage);
          break;
        }
        case 3: {
          const m = UserPushDevice.initialize();
          reader.readMessage(m, UserPushDevice._readMessage);
          msg.devices.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserPushDevice = {
  /**
   * Serializes UserPushDevice to protobuf.
   */
  encode: function (msg: Partial<UserPushDevice>): Uint8Array {
    return UserPushDevice._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UserPushDevice from protobuf.
   */
  decode: function (bytes: ByteSource): UserPushDevice {
    return UserPushDevice._readMessage(
      UserPushDevice.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserPushDevice with all fields set to their default value.
   */
  initialize: function (): UserPushDevice {
    return {
      id: "",
      pushProvider: PushProvider._fromInt(0),
      pushProviderName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserPushDevice>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.pushProvider && PushProvider._toInt(msg.pushProvider)) {
      writer.writeEnum(2, PushProvider._toInt(msg.pushProvider));
    }
    if (msg.pushProviderName) {
      writer.writeString(3, msg.pushProviderName);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserPushDevice,
    reader: BinaryReader
  ): UserPushDevice {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.pushProvider = PushProvider._fromInt(reader.readEnum());
          break;
        }
        case 3: {
          msg.pushProviderName = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserUnreadStatus = {
  /**
   * Serializes UserUnreadStatus to protobuf.
   */
  encode: function (msg: Partial<UserUnreadStatus>): Uint8Array {
    return UserUnreadStatus._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UserUnreadStatus from protobuf.
   */
  decode: function (bytes: ByteSource): UserUnreadStatus {
    return UserUnreadStatus._readMessage(
      UserUnreadStatus.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UserUnreadStatus with all fields set to their default value.
   */
  initialize: function (): UserUnreadStatus {
    return {
      unreadMessageCount: 0n,
      unreadChannelsCount: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserUnreadStatus>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.unreadMessageCount) {
      writer.writeInt64String(1, msg.unreadMessageCount.toString() as any);
    }
    if (msg.unreadChannelsCount) {
      writer.writeInt64String(2, msg.unreadChannelsCount.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserUnreadStatus,
    reader: BinaryReader
  ): UserUnreadStatus {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.unreadMessageCount = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.unreadChannelsCount = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UserLatest = {
  /**
   * Serializes UserLatest to protobuf.
   */
  encode: function (_msg?: Partial<UserLatest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UserLatest from protobuf.
   */
  decode: function (_bytes?: ByteSource): UserLatest {
    return {};
  },

  /**
   * Initializes UserLatest with all fields set to their default value.
   */
  initialize: function (): UserLatest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<UserLatest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg: UserLatest, _reader: BinaryReader): UserLatest {
    return _msg;
  },
};

export const UserMute = {
  /**
   * Serializes UserMute to protobuf.
   */
  encode: function (_msg?: Partial<UserMute>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UserMute from protobuf.
   */
  decode: function (_bytes?: ByteSource): UserMute {
    return {};
  },

  /**
   * Initializes UserMute with all fields set to their default value.
   */
  initialize: function (): UserMute {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<UserMute>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg: UserMute, _reader: BinaryReader): UserMute {
    return _msg;
  },
};

export const UserChannelMute = {
  /**
   * Serializes UserChannelMute to protobuf.
   */
  encode: function (_msg?: Partial<UserChannelMute>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes UserChannelMute from protobuf.
   */
  decode: function (_bytes?: ByteSource): UserChannelMute {
    return {};
  },

  /**
   * Initializes UserChannelMute with all fields set to their default value.
   */
  initialize: function (): UserChannelMute {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<UserChannelMute>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: UserChannelMute,
    _reader: BinaryReader
  ): UserChannelMute {
    return _msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const PushProviderJSON = {
  PUSH_PROVIDER_UNSPECIFIED: "PUSH_PROVIDER_UNSPECIFIED",
  PUSH_PROVIDER_FIREBASE: "PUSH_PROVIDER_FIREBASE",
  PUSH_PROVIDER_APN: "PUSH_PROVIDER_APN",
  PUSH_PROVIDER_HUAWEI: "PUSH_PROVIDER_HUAWEI",
  PUSH_PROVIDER_XIAOMI: "PUSH_PROVIDER_XIAOMI",
  /**
   * @private
   */
  _fromInt: function (i: number): PushProvider {
    switch (i) {
      case 0: {
        return "PUSH_PROVIDER_UNSPECIFIED";
      }
      case 1: {
        return "PUSH_PROVIDER_FIREBASE";
      }
      case 2: {
        return "PUSH_PROVIDER_APN";
      }
      case 3: {
        return "PUSH_PROVIDER_HUAWEI";
      }
      case 4: {
        return "PUSH_PROVIDER_XIAOMI";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as PushProvider;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: PushProvider): number {
    switch (i) {
      case "PUSH_PROVIDER_UNSPECIFIED": {
        return 0;
      }
      case "PUSH_PROVIDER_FIREBASE": {
        return 1;
      }
      case "PUSH_PROVIDER_APN": {
        return 2;
      }
      case "PUSH_PROVIDER_HUAWEI": {
        return 3;
      }
      case "PUSH_PROVIDER_XIAOMI": {
        return 4;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const UserJSON = {
  /**
   * Serializes User to JSON.
   */
  encode: function (msg: Partial<User>): string {
    return JSON.stringify(UserJSON._writeMessage(msg));
  },

  /**
   * Deserializes User from JSON.
   */
  decode: function (json: string): User {
    return UserJSON._readMessage(UserJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (): User {
    return {
      id: "",
      role: "",
      onlineStatus: UserOnlineStatus.initialize(),
      ban: UserBanStatus.initialize(),
      teams: [],
      language: "",
      custom: new Uint8Array(),
      createdAt: Timestamp.initialize(),
      updatedAt: Timestamp.initialize(),
      deletedAt: Timestamp.initialize(),
      deactivatedAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<User>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.role) {
      json.role = msg.role;
    }
    if (msg.onlineStatus) {
      const onlineStatus = UserOnlineStatusJSON._writeMessage(msg.onlineStatus);
      if (Object.keys(onlineStatus).length > 0) {
        json.onlineStatus = onlineStatus;
      }
    }
    if (msg.ban) {
      const ban = UserBanStatusJSON._writeMessage(msg.ban);
      if (Object.keys(ban).length > 0) {
        json.ban = ban;
      }
    }
    if (msg.teams?.length) {
      json.teams = msg.teams;
    }
    if (msg.language) {
      json.language = msg.language;
    }
    if (msg.custom?.length) {
      json.custom = encodeBase64Bytes(msg.custom);
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.updatedAt) {
      const updatedAt = TimestampJSON._writeMessage(msg.updatedAt);
      if (Object.keys(updatedAt).length > 0) {
        json.updatedAt = updatedAt;
      }
    }
    if (msg.deletedAt) {
      const deletedAt = TimestampJSON._writeMessage(msg.deletedAt);
      if (Object.keys(deletedAt).length > 0) {
        json.deletedAt = deletedAt;
      }
    }
    if (msg.deactivatedAt) {
      const deactivatedAt = TimestampJSON._writeMessage(msg.deactivatedAt);
      if (Object.keys(deactivatedAt).length > 0) {
        json.deactivatedAt = deactivatedAt;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, json: any): User {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _role = json.role;
    if (_role) {
      msg.role = _role;
    }
    const _onlineStatus = json.onlineStatus ?? json.online_status;
    if (_onlineStatus) {
      const m = UserOnlineStatus.initialize();
      UserOnlineStatusJSON._readMessage(m, _onlineStatus);
      msg.onlineStatus = m;
    }
    const _ban = json.ban;
    if (_ban) {
      const m = UserBanStatus.initialize();
      UserBanStatusJSON._readMessage(m, _ban);
      msg.ban = m;
    }
    const _teams = json.teams;
    if (_teams) {
      msg.teams = _teams;
    }
    const _language = json.language;
    if (_language) {
      msg.language = _language;
    }
    const _custom = json.custom;
    if (_custom) {
      msg.custom = decodeBase64Bytes(_custom);
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _updatedAt = json.updatedAt ?? json.updated_at;
    if (_updatedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _updatedAt);
      msg.updatedAt = m;
    }
    const _deletedAt = json.deletedAt ?? json.deleted_at;
    if (_deletedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _deletedAt);
      msg.deletedAt = m;
    }
    const _deactivatedAt = json.deactivatedAt ?? json.deactivated_at;
    if (_deactivatedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _deactivatedAt);
      msg.deactivatedAt = m;
    }
    return msg;
  },
};

export const UserOnlineStatusJSON = {
  /**
   * Serializes UserOnlineStatus to JSON.
   */
  encode: function (msg: Partial<UserOnlineStatus>): string {
    return JSON.stringify(UserOnlineStatusJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserOnlineStatus from JSON.
   */
  decode: function (json: string): UserOnlineStatus {
    return UserOnlineStatusJSON._readMessage(
      UserOnlineStatusJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserOnlineStatus with all fields set to their default value.
   */
  initialize: function (): UserOnlineStatus {
    return {
      online: false,
      lastActiveAt: Timestamp.initialize(),
      invisible: BoolValue.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserOnlineStatus>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.online) {
      json.online = msg.online;
    }
    if (msg.lastActiveAt) {
      const lastActiveAt = TimestampJSON._writeMessage(msg.lastActiveAt);
      if (Object.keys(lastActiveAt).length > 0) {
        json.lastActiveAt = lastActiveAt;
      }
    }
    if (msg.invisible) {
      const invisible = BoolValueJSON._writeMessage(msg.invisible);
      if (Object.keys(invisible).length > 0) {
        json.invisible = invisible;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserOnlineStatus, json: any): UserOnlineStatus {
    const _online = json.online;
    if (_online) {
      msg.online = _online;
    }
    const _lastActiveAt = json.lastActiveAt ?? json.last_active_at;
    if (_lastActiveAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _lastActiveAt);
      msg.lastActiveAt = m;
    }
    const _invisible = json.invisible;
    if (_invisible) {
      const m = BoolValue.initialize();
      BoolValueJSON._readMessage(m, _invisible);
      msg.invisible = m;
    }
    return msg;
  },
};

export const UserBanStatusJSON = {
  /**
   * Serializes UserBanStatus to JSON.
   */
  encode: function (msg: Partial<UserBanStatus>): string {
    return JSON.stringify(UserBanStatusJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserBanStatus from JSON.
   */
  decode: function (json: string): UserBanStatus {
    return UserBanStatusJSON._readMessage(
      UserBanStatusJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserBanStatus with all fields set to their default value.
   */
  initialize: function (): UserBanStatus {
    return {
      banned: false,
      banExpiresAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserBanStatus>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.banned) {
      json.banned = msg.banned;
    }
    if (msg.banExpiresAt) {
      const banExpiresAt = TimestampJSON._writeMessage(msg.banExpiresAt);
      if (Object.keys(banExpiresAt).length > 0) {
        json.banExpiresAt = banExpiresAt;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserBanStatus, json: any): UserBanStatus {
    const _banned = json.banned;
    if (_banned) {
      msg.banned = _banned;
    }
    const _banExpiresAt = json.banExpiresAt ?? json.ban_expires_at;
    if (_banExpiresAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _banExpiresAt);
      msg.banExpiresAt = m;
    }
    return msg;
  },
};

export const UserOwnViewJSON = {
  /**
   * Serializes UserOwnView to JSON.
   */
  encode: function (msg: Partial<UserOwnView>): string {
    return JSON.stringify(UserOwnViewJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserOwnView from JSON.
   */
  decode: function (json: string): UserOwnView {
    return UserOwnViewJSON._readMessage(
      UserOwnViewJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserOwnView with all fields set to their default value.
   */
  initialize: function (): UserOwnView {
    return {
      user: User.initialize(),
      pushSettings: UserPushNotificationsSettings.initialize(),
      unread: UserUnreadStatus.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<UserOwnView>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const user = UserJSON._writeMessage(msg.user);
      if (Object.keys(user).length > 0) {
        json.user = user;
      }
    }
    if (msg.pushSettings) {
      const pushSettings = UserPushNotificationsSettingsJSON._writeMessage(
        msg.pushSettings
      );
      if (Object.keys(pushSettings).length > 0) {
        json.pushSettings = pushSettings;
      }
    }
    if (msg.unread) {
      const unread = UserUnreadStatusJSON._writeMessage(msg.unread);
      if (Object.keys(unread).length > 0) {
        json.unread = unread;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserOwnView, json: any): UserOwnView {
    const _user = json.user;
    if (_user) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user);
      msg.user = m;
    }
    const _pushSettings = json.pushSettings ?? json.push_settings;
    if (_pushSettings) {
      const m = UserPushNotificationsSettings.initialize();
      UserPushNotificationsSettingsJSON._readMessage(m, _pushSettings);
      msg.pushSettings = m;
    }
    const _unread = json.unread;
    if (_unread) {
      const m = UserUnreadStatus.initialize();
      UserUnreadStatusJSON._readMessage(m, _unread);
      msg.unread = m;
    }
    return msg;
  },
};

export const UserSettingsJSON = {
  /**
   * Serializes UserSettings to JSON.
   */
  encode: function (msg: Partial<UserSettings>): string {
    return JSON.stringify(UserSettingsJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserSettings from JSON.
   */
  decode: function (json: string): UserSettings {
    return UserSettingsJSON._readMessage(
      UserSettingsJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserSettings with all fields set to their default value.
   */
  initialize: function (): UserSettings {
    return {
      push: UserPushNotificationsSettings.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserSettings>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.push) {
      const push = UserPushNotificationsSettingsJSON._writeMessage(msg.push);
      if (Object.keys(push).length > 0) {
        json.push = push;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserSettings, json: any): UserSettings {
    const _push = json.push;
    if (_push) {
      const m = UserPushNotificationsSettings.initialize();
      UserPushNotificationsSettingsJSON._readMessage(m, _push);
      msg.push = m;
    }
    return msg;
  },
};

export const UserPushNotificationsSettingsJSON = {
  /**
   * Serializes UserPushNotificationsSettings to JSON.
   */
  encode: function (msg: Partial<UserPushNotificationsSettings>): string {
    return JSON.stringify(UserPushNotificationsSettingsJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserPushNotificationsSettings from JSON.
   */
  decode: function (json: string): UserPushNotificationsSettings {
    return UserPushNotificationsSettingsJSON._readMessage(
      UserPushNotificationsSettingsJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserPushNotificationsSettings with all fields set to their default value.
   */
  initialize: function (): UserPushNotificationsSettings {
    return {
      disabled: false,
      disabledUntil: Timestamp.initialize(),
      devices: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserPushNotificationsSettings>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.disabled) {
      json.disabled = msg.disabled;
    }
    if (msg.disabledUntil) {
      const disabledUntil = TimestampJSON._writeMessage(msg.disabledUntil);
      if (Object.keys(disabledUntil).length > 0) {
        json.disabledUntil = disabledUntil;
      }
    }
    if (msg.devices?.length) {
      json.devices = msg.devices.map(UserPushDeviceJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UserPushNotificationsSettings,
    json: any
  ): UserPushNotificationsSettings {
    const _disabled = json.disabled;
    if (_disabled) {
      msg.disabled = _disabled;
    }
    const _disabledUntil = json.disabledUntil ?? json.disabled_until;
    if (_disabledUntil) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _disabledUntil);
      msg.disabledUntil = m;
    }
    const _devices = json.devices;
    if (_devices) {
      for (const item of _devices) {
        const m = UserPushDevice.initialize();
        UserPushDeviceJSON._readMessage(m, item);
        msg.devices.push(m);
      }
    }
    return msg;
  },
};

export const UserPushDeviceJSON = {
  /**
   * Serializes UserPushDevice to JSON.
   */
  encode: function (msg: Partial<UserPushDevice>): string {
    return JSON.stringify(UserPushDeviceJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserPushDevice from JSON.
   */
  decode: function (json: string): UserPushDevice {
    return UserPushDeviceJSON._readMessage(
      UserPushDeviceJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserPushDevice with all fields set to their default value.
   */
  initialize: function (): UserPushDevice {
    return {
      id: "",
      pushProvider: PushProvider._fromInt(0),
      pushProviderName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserPushDevice>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.pushProvider && PushProviderJSON._toInt(msg.pushProvider)) {
      json.pushProvider = msg.pushProvider;
    }
    if (msg.pushProviderName) {
      json.pushProviderName = msg.pushProviderName;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserPushDevice, json: any): UserPushDevice {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _pushProvider = json.pushProvider ?? json.push_provider;
    if (_pushProvider) {
      msg.pushProvider = _pushProvider;
    }
    const _pushProviderName = json.pushProviderName ?? json.push_provider_name;
    if (_pushProviderName) {
      msg.pushProviderName = _pushProviderName;
    }
    return msg;
  },
};

export const UserUnreadStatusJSON = {
  /**
   * Serializes UserUnreadStatus to JSON.
   */
  encode: function (msg: Partial<UserUnreadStatus>): string {
    return JSON.stringify(UserUnreadStatusJSON._writeMessage(msg));
  },

  /**
   * Deserializes UserUnreadStatus from JSON.
   */
  decode: function (json: string): UserUnreadStatus {
    return UserUnreadStatusJSON._readMessage(
      UserUnreadStatusJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UserUnreadStatus with all fields set to their default value.
   */
  initialize: function (): UserUnreadStatus {
    return {
      unreadMessageCount: 0n,
      unreadChannelsCount: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UserUnreadStatus>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.unreadMessageCount) {
      json.unreadMessageCount = msg.unreadMessageCount.toString();
    }
    if (msg.unreadChannelsCount) {
      json.unreadChannelsCount = msg.unreadChannelsCount.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserUnreadStatus, json: any): UserUnreadStatus {
    const _unreadMessageCount =
      json.unreadMessageCount ?? json.unread_message_count;
    if (_unreadMessageCount) {
      msg.unreadMessageCount = BigInt(_unreadMessageCount);
    }
    const _unreadChannelsCount =
      json.unreadChannelsCount ?? json.unread_channels_count;
    if (_unreadChannelsCount) {
      msg.unreadChannelsCount = BigInt(_unreadChannelsCount);
    }
    return msg;
  },
};

export const UserLatestJSON = {
  /**
   * Serializes UserLatest to JSON.
   */
  encode: function (_msg?: Partial<UserLatest>): string {
    return "{}";
  },

  /**
   * Deserializes UserLatest from JSON.
   */
  decode: function (_json?: string): UserLatest {
    return {};
  },

  /**
   * Initializes UserLatest with all fields set to their default value.
   */
  initialize: function (): UserLatest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg: Partial<UserLatest>): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserLatest, _json: any): UserLatest {
    return msg;
  },
};

export const UserMuteJSON = {
  /**
   * Serializes UserMute to JSON.
   */
  encode: function (_msg?: Partial<UserMute>): string {
    return "{}";
  },

  /**
   * Deserializes UserMute from JSON.
   */
  decode: function (_json?: string): UserMute {
    return {};
  },

  /**
   * Initializes UserMute with all fields set to their default value.
   */
  initialize: function (): UserMute {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg: Partial<UserMute>): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserMute, _json: any): UserMute {
    return msg;
  },
};

export const UserChannelMuteJSON = {
  /**
   * Serializes UserChannelMute to JSON.
   */
  encode: function (_msg?: Partial<UserChannelMute>): string {
    return "{}";
  },

  /**
   * Deserializes UserChannelMute from JSON.
   */
  decode: function (_json?: string): UserChannelMute {
    return {};
  },

  /**
   * Initializes UserChannelMute with all fields set to their default value.
   */
  initialize: function (): UserChannelMute {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<UserChannelMute>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: UserChannelMute, _json: any): UserChannelMute {
    return msg;
  },
};
