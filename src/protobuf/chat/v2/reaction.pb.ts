// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: chat/v2/reaction.proto
/* eslint-disable */

import type { ByteSource } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  encodeBase64Bytes,
  decodeBase64Bytes,
} from "twirpscript";

import {
  StringValue,
  StringValueJSON,
} from "../../google/protobuf/wrappers.pb";
import { Timestamp, TimestampJSON } from "../../google/protobuf/timestamp.pb";
import { User, UserJSON } from "./user.pb";

//========================================//
//                 Types                  //
//========================================//

/**
 * Message reaction, referenced by the message
 */
export interface Reaction {
  /**
   * ID of the user who sent the reaction
   */
  userId: string;
  /**
   * ID of the message the reaction is for
   * message_id will be ommited when reaction is included into Message View or other message related envelopes
   */
  messageId: StringValue;
  /**
   * Reaction type (e.g. like, happy, crying)
   */
  type: string;
  /**
   * Score of the reaction. Only used for Medium style of reactions (e.g. "+10 claps")
   */
  score: bigint;
  /**
   * JSON encoded custom data attached to reactions
   */
  custom: Uint8Array;
  /**
   * Date of reaction creation
   */
  createdAt: Timestamp;
  /**
   * Date of last reaction update
   */
  updatedAt: Timestamp;
}

/**
 * A view that contains additional reaction data
 */
export interface ReactionView {
  /**
   * The reaction
   */
  reaction: Reaction;
  /**
   * User who sent the reaction
   */
  user: User;
}

/**
 * A collection of reaction views
 */
export interface ReactionViews {
  /**
   * List of reaction views
   */
  reactions: ReactionView[];
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Reaction = {
  /**
   * Serializes Reaction to protobuf.
   */
  encode: function (msg: Partial<Reaction>): Uint8Array {
    return Reaction._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Reaction from protobuf.
   */
  decode: function (bytes: ByteSource): Reaction {
    return Reaction._readMessage(
      Reaction.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Reaction with all fields set to their default value.
   */
  initialize: function (): Reaction {
    return {
      userId: "",
      messageId: StringValue.initialize(),
      type: "",
      score: 0n,
      custom: new Uint8Array(),
      createdAt: Timestamp.initialize(),
      updatedAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Reaction>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.userId) {
      writer.writeString(1, msg.userId);
    }
    if (msg.messageId) {
      writer.writeMessage(2, msg.messageId, StringValue._writeMessage);
    }
    if (msg.type) {
      writer.writeString(3, msg.type);
    }
    if (msg.score) {
      writer.writeInt64String(4, msg.score.toString() as any);
    }
    if (msg.custom?.length) {
      writer.writeBytes(5, msg.custom);
    }
    if (msg.createdAt) {
      writer.writeMessage(6, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.updatedAt) {
      writer.writeMessage(7, msg.updatedAt, Timestamp._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Reaction, reader: BinaryReader): Reaction {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userId = reader.readString();
          break;
        }
        case 2: {
          reader.readMessage(msg.messageId, StringValue._readMessage);
          break;
        }
        case 3: {
          msg.type = reader.readString();
          break;
        }
        case 4: {
          msg.score = BigInt(reader.readInt64String());
          break;
        }
        case 5: {
          msg.custom = reader.readBytes();
          break;
        }
        case 6: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 7: {
          reader.readMessage(msg.updatedAt, Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ReactionView = {
  /**
   * Serializes ReactionView to protobuf.
   */
  encode: function (msg: Partial<ReactionView>): Uint8Array {
    return ReactionView._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ReactionView from protobuf.
   */
  decode: function (bytes: ByteSource): ReactionView {
    return ReactionView._readMessage(
      ReactionView.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ReactionView with all fields set to their default value.
   */
  initialize: function (): ReactionView {
    return {
      reaction: Reaction.initialize(),
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ReactionView>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.reaction) {
      writer.writeMessage(1, msg.reaction, Reaction._writeMessage);
    }
    if (msg.user) {
      writer.writeMessage(2, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ReactionView,
    reader: BinaryReader
  ): ReactionView {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.reaction, Reaction._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ReactionViews = {
  /**
   * Serializes ReactionViews to protobuf.
   */
  encode: function (msg: Partial<ReactionViews>): Uint8Array {
    return ReactionViews._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ReactionViews from protobuf.
   */
  decode: function (bytes: ByteSource): ReactionViews {
    return ReactionViews._readMessage(
      ReactionViews.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ReactionViews with all fields set to their default value.
   */
  initialize: function (): ReactionViews {
    return {
      reactions: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ReactionViews>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.reactions?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.reactions as any,
        ReactionView._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ReactionViews,
    reader: BinaryReader
  ): ReactionViews {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = ReactionView.initialize();
          reader.readMessage(m, ReactionView._readMessage);
          msg.reactions.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ReactionJSON = {
  /**
   * Serializes Reaction to JSON.
   */
  encode: function (msg: Partial<Reaction>): string {
    return JSON.stringify(ReactionJSON._writeMessage(msg));
  },

  /**
   * Deserializes Reaction from JSON.
   */
  decode: function (json: string): Reaction {
    return ReactionJSON._readMessage(
      ReactionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Reaction with all fields set to their default value.
   */
  initialize: function (): Reaction {
    return {
      userId: "",
      messageId: StringValue.initialize(),
      type: "",
      score: 0n,
      custom: new Uint8Array(),
      createdAt: Timestamp.initialize(),
      updatedAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Reaction>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.messageId) {
      const messageId = StringValueJSON._writeMessage(msg.messageId);
      if (Object.keys(messageId).length > 0) {
        json.messageId = messageId;
      }
    }
    if (msg.type) {
      json.type = msg.type;
    }
    if (msg.score) {
      json.score = msg.score.toString();
    }
    if (msg.custom?.length) {
      json.custom = encodeBase64Bytes(msg.custom);
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.updatedAt) {
      const updatedAt = TimestampJSON._writeMessage(msg.updatedAt);
      if (Object.keys(updatedAt).length > 0) {
        json.updatedAt = updatedAt;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Reaction, json: any): Reaction {
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _messageId = json.messageId ?? json.message_id;
    if (_messageId) {
      const m = StringValue.initialize();
      StringValueJSON._readMessage(m, _messageId);
      msg.messageId = m;
    }
    const _type = json.type;
    if (_type) {
      msg.type = _type;
    }
    const _score = json.score;
    if (_score) {
      msg.score = BigInt(_score);
    }
    const _custom = json.custom;
    if (_custom) {
      msg.custom = decodeBase64Bytes(_custom);
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _updatedAt = json.updatedAt ?? json.updated_at;
    if (_updatedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _updatedAt);
      msg.updatedAt = m;
    }
    return msg;
  },
};

export const ReactionViewJSON = {
  /**
   * Serializes ReactionView to JSON.
   */
  encode: function (msg: Partial<ReactionView>): string {
    return JSON.stringify(ReactionViewJSON._writeMessage(msg));
  },

  /**
   * Deserializes ReactionView from JSON.
   */
  decode: function (json: string): ReactionView {
    return ReactionViewJSON._readMessage(
      ReactionViewJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ReactionView with all fields set to their default value.
   */
  initialize: function (): ReactionView {
    return {
      reaction: Reaction.initialize(),
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ReactionView>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.reaction) {
      const reaction = ReactionJSON._writeMessage(msg.reaction);
      if (Object.keys(reaction).length > 0) {
        json.reaction = reaction;
      }
    }
    if (msg.user) {
      const user = UserJSON._writeMessage(msg.user);
      if (Object.keys(user).length > 0) {
        json.user = user;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReactionView, json: any): ReactionView {
    const _reaction = json.reaction;
    if (_reaction) {
      const m = Reaction.initialize();
      ReactionJSON._readMessage(m, _reaction);
      msg.reaction = m;
    }
    const _user = json.user;
    if (_user) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user);
      msg.user = m;
    }
    return msg;
  },
};

export const ReactionViewsJSON = {
  /**
   * Serializes ReactionViews to JSON.
   */
  encode: function (msg: Partial<ReactionViews>): string {
    return JSON.stringify(ReactionViewsJSON._writeMessage(msg));
  },

  /**
   * Deserializes ReactionViews from JSON.
   */
  decode: function (json: string): ReactionViews {
    return ReactionViewsJSON._readMessage(
      ReactionViewsJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ReactionViews with all fields set to their default value.
   */
  initialize: function (): ReactionViews {
    return {
      reactions: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ReactionViews>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.reactions?.length) {
      json.reactions = msg.reactions.map(ReactionViewJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReactionViews, json: any): ReactionViews {
    const _reactions = json.reactions;
    if (_reactions) {
      for (const item of _reactions) {
        const m = ReactionView.initialize();
        ReactionViewJSON._readMessage(m, item);
        msg.reactions.push(m);
      }
    }
    return msg;
  },
};
