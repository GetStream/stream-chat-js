// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: chat/v2/message.proto
/* eslint-disable */

import type { ByteSource } from "twirpscript";
import {
  BinaryReader,
  BinaryWriter,
  encodeBase64Bytes,
  decodeBase64Bytes,
} from "twirpscript";

import { Timestamp, TimestampJSON } from "../../google/protobuf/timestamp.pb";
import { ReactionViews, ReactionViewsJSON } from "./reaction.pb";
import { User, UserJSON } from "./user.pb";

//========================================//
//                 Types                  //
//========================================//

/**
 * The type of the message
 */
export type MessageType =
  | "MESSAGE_TYPE_UNSPECIFIED"
  | "MESSAGE_TYPE_REGULAR"
  | "MESSAGE_TYPE_EPHEMERAL"
  | "MESSAGE_TYPE_ERROR"
  | "MESSAGE_TYPE_REPLY"
  | "MESSAGE_TYPE_SYSTEM"
  | "MESSAGE_TYPE_DELETED";

/**
 * Message is a chat message that is sent to a channel
 */
export interface Message {
  /**
   * Unique identifier of the message
   */
  id: string;
  /**
   * The channel CID of the channel the message was sent to
   */
  channelCid: string;
  /**
   * The type of the message
   */
  type: MessageType;
  /**
   * The ID of the user who sent the message
   */
  userId: string;
  /**
   * The text of the message
   */
  text: string;
  /**
   * The messaging markup language for the message
   */
  mml: string;
  /**
   * The HTML content of the message
   */
  html: string;
  /**
   * A map that contains message text translations into various languages
   * map key is a language name
   * map value is a text translation
   */
  i18n: Record<string, Message.I18n["value"] | undefined>;
  /**
   * JSON object which contains any user data
   */
  custom: Uint8Array;
  attachments: MessageAttachment[];
  /**
   * The name of a command used in the message
   */
  commandName: string;
  /**
   * The message creation timestamp
   */
  createdAt: Timestamp;
  /**
   * The message update timestamp
   */
  updatedAt: Timestamp;
  /**
   * The message deletion timestamp
   */
  deletedAt: Timestamp;
  /**
   * The ID of a parent message, if this message is in a thread
   */
  parentMessageId: string;
  /**
   * Whether to show this message in the channel, if this message is in a thread
   */
  showInChannel: boolean;
  /**
   * The number of replies to this message
   */
  replyCount: bigint;
  /**
   * The ID of a message that this message quotes
   */
  quotedMessageId: string;
  /**
   * Whether the message is silent
   */
  silent: boolean;
  /**
   * Contains message pin info. If empty - message is not pinned
   */
  pinned: MessagePin;
  /**
   * The user IDs of the users that replied to this message
   */
  threadParticipantUserIds: string[];
  /**
   * The user IDs of users that were mentioned in this message
   */
  mentionedUserIds: string[];
  /**
   * A map with number of reactions of each type
   * map key is a reaction type
   */
  reactionCounts: Record<string, Message.ReactionCounts["value"] | undefined>;
  /**
   * A map with sum of reaction scores of each type
   * map key is a reaction type
   */
  reactionScores: Record<string, Message.ReactionScores["value"] | undefined>;
}

export declare namespace Message {
  interface I18n {
    key: string;
    value: string;
  }

  interface ReactionCounts {
    key: string;
    value: bigint;
  }

  interface ReactionScores {
    key: string;
    value: bigint;
  }
}

/**
 * Contains message pin info
 */
export interface MessagePin {
  /**
   * When the message was pinned
   */
  pinnedAt: Timestamp;
  /**
   * When the pin for this message expires
   */
  pinExpiresAt: Timestamp;
  /**
   * The user ID of the user that pinned this message
   */
  pinnedByUserId: string;
}

/**
 * A view of a message that contains additional info
 */
export interface MessageView {
  /**
   * The message
   */
  message: Message;
  /**
   * Message sender object
   */
  user: User;
  /**
   * Object containing parent message view. Empty if there's no parent message
   */
  parentMessage: MessageView;
  /**
   * Object containing quoted message. Empty if there's no quoted message
   * MessageView that provided here will not contain quoted message
   */
  quotedMessage: MessageView;
  /**
   * List of users who replied to this message
   */
  threadParticipants: User[];
  /**
   * List of users that were mentioned in this message
   */
  mentionedUsers: User[];
  /**
   * A map with 5 latest reactions of each type
   * map key is a reaction type
   */
  latestReactions: Record<
    string,
    MessageView.LatestReactions["value"] | undefined
  >;
}

export declare namespace MessageView {
  interface LatestReactions {
    key: string;
    value: ReactionViews;
  }
}

/**
 * A collection of messages
 */
export interface Messages {
  /**
   * The messages
   */
  messages: Message[];
}

/**
 * Attachment that can be added to the message
 */
export interface MessageAttachment {
  /**
   * Type of the attachment. Can be any string.
   * TODO: should we lock this down with enum/oneof to keep in sync with SDKs? We have custom data in messages if someone needs to get creative
   * Examples: image, video, audio, text
   */
  type: string;
}

export interface MessageInput {
  /**
   * Unique identifier of the message. The server will generate an ID if it is not set. The server will generate an ID if it is not set
   */
  id: string;
  /**
   * The channel CID of the channel the message was sent to
   */
  channelCid: string;
  /**
   * The text of the message
   */
  text: string;
  /**
   * The ID of a parent message, if this message is in a thread
   */
  parentMessageId: string;
  /**
   * Whether to show this message in the channel, if this message is in a thread
   */
  showInChannel: boolean;
  /**
   * The ID of a message that this message quotes
   */
  quotedMessageId: string;
  /**
   * Whether to show this message in the channel, if this message is in a thread
   */
  pinned: boolean;
  /**
   * When the message was pinned
   */
  pinnedAt: Timestamp;
  /**
   * When the pin for this message expires
   */
  pinExpiresAt: Timestamp;
  /**
   * Whether the message is silent
   */
  silent: boolean;
}

/**
 * An input to send a message from a client side request
 */
export interface MessageSendClientSideView {
  /**
   * Unique identifier of the message. The server will generate an ID if it is not set. The server will generate an ID if it is not set
   */
  id: string;
  /**
   * The channel CID of the channel the message was sent to
   */
  channelCid: string;
  /**
   * The text of the message
   */
  text: string;
  /**
   * The ID of a parent message, if this message is in a thread
   */
  parentMessageId: string;
  /**
   * Whether to show this message in the channel, if this message is in a thread
   */
  showInChannel: boolean;
  /**
   * The ID of a message that this message quotes
   */
  quotedMessageId: string;
  /**
   * Whether to show this message in the channel, if this message is in a thread
   */
  pinned: boolean;
  /**
   * When the message was pinned
   */
  pinnedAt: Timestamp;
  /**
   * When the pin for this message expires
   */
  pinExpiresAt: Timestamp;
  /**
   * Whether the message is silent
   */
  silent: boolean;
}

/**
 * An input to send a message from a server side request
 */
export interface MessageSendServerSideView {
  /**
   * The message fields
   */
  message: MessageSendClientSideView;
  /**
   * The messaging markup language content for the message
   */
  mml: string;
  /**
   * The ID of the user who sent the message
   */
  userId: string;
}

/**
 * A request to send a message to a channel
 */
export interface SendMessageRequest {
  clientSideMessage?: MessageSendClientSideView | null | undefined;
  serverSideMessage?: MessageSendServerSideView | null | undefined;
  /**
   * Whether to skip push notifications for this message
   */
  skipPush: boolean;
  /**
   * Whether to skip enriching any urls present in this message
   */
  skipEnrichUrl: boolean;
}

/**
 * A response from sending a message
 */
export interface SendMessageResponse {
  /**
   * The content of the response
   */
  message: Message;
}

/**
 * A request to get a message by ID
 */
export interface GetMessageRequest {
  /**
   * The channel CID of the channel the message is in
   */
  channelCid: string;
  /**
   * The ID of the message
   */
  messageId: string;
}

/**
 * A response from getting a message
 */
export interface GetMessageResponse {
  /**
   * The content of the response
   */
  message: Message;
}

/**
 * A request to get many messages by ID
 */
export interface GetMessagesRequest {
  /**
   * The ID of the messages
   */
  messageIds: string[];
  /**
   * The channel CID of the channel the messages are in
   */
  channelCid: string;
}

/**
 * A response from getting messages
 */
export interface GetMessagesResponse {
  /**
   * The content of the response
   */
  messages: Messages;
}

/**
 * A request to delete a message by ID
 */
export interface DeleteMessageRequest {
  /**
   * The ID of the message
   */
  messageId: string;
  /**
   * The channel CID of the channel the message is in
   */
  channelCid: string;
  /**
   * Whether to hard delete the message
   */
  hard: boolean;
}

/**
 * A response from deleting a message
 */
export interface DeleteMessageResponse {
  /**
   * The content of the response
   */
  messages: Messages;
}

/**
 * A request to update a message
 */
export interface UpdateMessageRequest {
  /**
   * Whether to skip enriching any urls present in this message
   */
  skipEnrichUrl: boolean;
}

/**
 * A response from updating a message
 */
export interface UpdateMessageResponse {
  /**
   * The content of the response
   */
  messages: Messages;
}

/**
 * A request to pin a message
 */
export interface PinMessageRequest {
  /**
   * The ID of the message
   */
  messageId: string;
  /**
   * The channel CID of the channel the message was sent to
   */
  channelCid: string;
  /**
   * When the message was pinned. If empty, the server will populate this field
   */
  pinnedAt: Timestamp;
  /**
   * When the pin for this message expires
   */
  pinExpiresAt: Timestamp;
}

/**
 * A response from pinning a message
 */
export interface PinMessageResponse {
  /**
   * The content of the response
   */
  messages: Messages;
}

/**
 * A request to unpin a message
 */
export interface UnpinMessageRequest {
  /**
   * The ID of the message
   */
  messageId: string;
  /**
   * The channel CID of the channel the message was sent to
   */
  channelCid: string;
}

/**
 * A response from unpinning a message
 */
export interface UnpinMessageResponse {
  /**
   * The content of the response
   */
  messages: Messages;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const MessageType = {
  MESSAGE_TYPE_UNSPECIFIED: "MESSAGE_TYPE_UNSPECIFIED",
  /**
   * A regular message
   */
  MESSAGE_TYPE_REGULAR: "MESSAGE_TYPE_REGULAR",
  /**
   * A temporary message which is only delivered to one user
   */
  MESSAGE_TYPE_EPHEMERAL: "MESSAGE_TYPE_EPHEMERAL",
  /**
   * An error message which occurs as the result of a failed command
   */
  MESSAGE_TYPE_ERROR: "MESSAGE_TYPE_ERROR",
  /**
   * A reply in a thread
   */
  MESSAGE_TYPE_REPLY: "MESSAGE_TYPE_REPLY",
  /**
   * A message generated by a system event
   */
  MESSAGE_TYPE_SYSTEM: "MESSAGE_TYPE_SYSTEM",
  /**
   * A soft deleted message
   */
  MESSAGE_TYPE_DELETED: "MESSAGE_TYPE_DELETED",
  /**
   * @private
   */
  _fromInt: function (i: number): MessageType {
    switch (i) {
      case 0: {
        return "MESSAGE_TYPE_UNSPECIFIED";
      }
      case 1: {
        return "MESSAGE_TYPE_REGULAR";
      }
      case 2: {
        return "MESSAGE_TYPE_EPHEMERAL";
      }
      case 3: {
        return "MESSAGE_TYPE_ERROR";
      }
      case 4: {
        return "MESSAGE_TYPE_REPLY";
      }
      case 5: {
        return "MESSAGE_TYPE_SYSTEM";
      }
      case 6: {
        return "MESSAGE_TYPE_DELETED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as MessageType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: MessageType): number {
    switch (i) {
      case "MESSAGE_TYPE_UNSPECIFIED": {
        return 0;
      }
      case "MESSAGE_TYPE_REGULAR": {
        return 1;
      }
      case "MESSAGE_TYPE_EPHEMERAL": {
        return 2;
      }
      case "MESSAGE_TYPE_ERROR": {
        return 3;
      }
      case "MESSAGE_TYPE_REPLY": {
        return 4;
      }
      case "MESSAGE_TYPE_SYSTEM": {
        return 5;
      }
      case "MESSAGE_TYPE_DELETED": {
        return 6;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const Message = {
  /**
   * Serializes Message to protobuf.
   */
  encode: function (msg: Partial<Message>): Uint8Array {
    return Message._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Message from protobuf.
   */
  decode: function (bytes: ByteSource): Message {
    return Message._readMessage(Message.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Message with all fields set to their default value.
   */
  initialize: function (): Message {
    return {
      id: "",
      channelCid: "",
      type: MessageType._fromInt(0),
      userId: "",
      text: "",
      mml: "",
      html: "",
      i18n: {},
      custom: new Uint8Array(),
      attachments: [],
      commandName: "",
      createdAt: Timestamp.initialize(),
      updatedAt: Timestamp.initialize(),
      deletedAt: Timestamp.initialize(),
      parentMessageId: "",
      showInChannel: false,
      replyCount: 0n,
      quotedMessageId: "",
      silent: false,
      pinned: MessagePin.initialize(),
      threadParticipantUserIds: [],
      mentionedUserIds: [],
      reactionCounts: {},
      reactionScores: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Message>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.channelCid) {
      writer.writeString(2, msg.channelCid);
    }
    if (msg.type && MessageType._toInt(msg.type)) {
      writer.writeEnum(3, MessageType._toInt(msg.type));
    }
    if (msg.userId) {
      writer.writeString(4, msg.userId);
    }
    if (msg.text) {
      writer.writeString(5, msg.text);
    }
    if (msg.mml) {
      writer.writeString(6, msg.mml);
    }
    if (msg.html) {
      writer.writeString(7, msg.html);
    }
    if (msg.i18n) {
      writer.writeRepeatedMessage(
        8,
        Object.entries(msg.i18n).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        Message.I18n._writeMessage
      );
    }
    if (msg.custom?.length) {
      writer.writeBytes(9, msg.custom);
    }
    if (msg.attachments?.length) {
      writer.writeRepeatedMessage(
        10,
        msg.attachments as any,
        MessageAttachment._writeMessage
      );
    }
    if (msg.commandName) {
      writer.writeString(11, msg.commandName);
    }
    if (msg.createdAt) {
      writer.writeMessage(12, msg.createdAt, Timestamp._writeMessage);
    }
    if (msg.updatedAt) {
      writer.writeMessage(13, msg.updatedAt, Timestamp._writeMessage);
    }
    if (msg.deletedAt) {
      writer.writeMessage(14, msg.deletedAt, Timestamp._writeMessage);
    }
    if (msg.parentMessageId) {
      writer.writeString(15, msg.parentMessageId);
    }
    if (msg.showInChannel) {
      writer.writeBool(16, msg.showInChannel);
    }
    if (msg.replyCount) {
      writer.writeInt64String(17, msg.replyCount.toString() as any);
    }
    if (msg.quotedMessageId) {
      writer.writeString(18, msg.quotedMessageId);
    }
    if (msg.silent) {
      writer.writeBool(19, msg.silent);
    }
    if (msg.pinned) {
      writer.writeMessage(20, msg.pinned, MessagePin._writeMessage);
    }
    if (msg.threadParticipantUserIds?.length) {
      writer.writeRepeatedString(21, msg.threadParticipantUserIds);
    }
    if (msg.mentionedUserIds?.length) {
      writer.writeRepeatedString(22, msg.mentionedUserIds);
    }
    if (msg.reactionCounts) {
      writer.writeRepeatedMessage(
        23,
        Object.entries(msg.reactionCounts).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        Message.ReactionCounts._writeMessage
      );
    }
    if (msg.reactionScores) {
      writer.writeRepeatedMessage(
        24,
        Object.entries(msg.reactionScores).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        Message.ReactionScores._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Message, reader: BinaryReader): Message {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 2: {
          msg.channelCid = reader.readString();
          break;
        }
        case 3: {
          msg.type = MessageType._fromInt(reader.readEnum());
          break;
        }
        case 4: {
          msg.userId = reader.readString();
          break;
        }
        case 5: {
          msg.text = reader.readString();
          break;
        }
        case 6: {
          msg.mml = reader.readString();
          break;
        }
        case 7: {
          msg.html = reader.readString();
          break;
        }
        case 8: {
          const map = {} as Message.I18n;
          reader.readMessage(map, Message.I18n._readMessage);
          msg.i18n[map.key.toString()] = map.value;
          break;
        }
        case 9: {
          msg.custom = reader.readBytes();
          break;
        }
        case 10: {
          const m = MessageAttachment.initialize();
          reader.readMessage(m, MessageAttachment._readMessage);
          msg.attachments.push(m);
          break;
        }
        case 11: {
          msg.commandName = reader.readString();
          break;
        }
        case 12: {
          reader.readMessage(msg.createdAt, Timestamp._readMessage);
          break;
        }
        case 13: {
          reader.readMessage(msg.updatedAt, Timestamp._readMessage);
          break;
        }
        case 14: {
          reader.readMessage(msg.deletedAt, Timestamp._readMessage);
          break;
        }
        case 15: {
          msg.parentMessageId = reader.readString();
          break;
        }
        case 16: {
          msg.showInChannel = reader.readBool();
          break;
        }
        case 17: {
          msg.replyCount = BigInt(reader.readInt64String());
          break;
        }
        case 18: {
          msg.quotedMessageId = reader.readString();
          break;
        }
        case 19: {
          msg.silent = reader.readBool();
          break;
        }
        case 20: {
          reader.readMessage(msg.pinned, MessagePin._readMessage);
          break;
        }
        case 21: {
          msg.threadParticipantUserIds.push(reader.readString());
          break;
        }
        case 22: {
          msg.mentionedUserIds.push(reader.readString());
          break;
        }
        case 23: {
          const map = {} as Message.ReactionCounts;
          reader.readMessage(map, Message.ReactionCounts._readMessage);
          msg.reactionCounts[map.key.toString()] = map.value;
          break;
        }
        case 24: {
          const map = {} as Message.ReactionScores;
          reader.readMessage(map, Message.ReactionScores._readMessage);
          msg.reactionScores[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  I18n: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Message.I18n>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Message.I18n,
      reader: BinaryReader
    ): Message.I18n {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReactionCounts: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Message.ReactionCounts>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Message.ReactionCounts,
      reader: BinaryReader
    ): Message.ReactionCounts {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },

  ReactionScores: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Message.ReactionScores>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeInt64String(2, msg.value.toString() as any);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Message.ReactionScores,
      reader: BinaryReader
    ): Message.ReactionScores {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = BigInt(reader.readInt64String());
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const MessagePin = {
  /**
   * Serializes MessagePin to protobuf.
   */
  encode: function (msg: Partial<MessagePin>): Uint8Array {
    return MessagePin._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes MessagePin from protobuf.
   */
  decode: function (bytes: ByteSource): MessagePin {
    return MessagePin._readMessage(
      MessagePin.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MessagePin with all fields set to their default value.
   */
  initialize: function (): MessagePin {
    return {
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
      pinnedByUserId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessagePin>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.pinnedAt) {
      writer.writeMessage(20, msg.pinnedAt, Timestamp._writeMessage);
    }
    if (msg.pinExpiresAt) {
      writer.writeMessage(21, msg.pinExpiresAt, Timestamp._writeMessage);
    }
    if (msg.pinnedByUserId) {
      writer.writeString(22, msg.pinnedByUserId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MessagePin, reader: BinaryReader): MessagePin {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 20: {
          reader.readMessage(msg.pinnedAt, Timestamp._readMessage);
          break;
        }
        case 21: {
          reader.readMessage(msg.pinExpiresAt, Timestamp._readMessage);
          break;
        }
        case 22: {
          msg.pinnedByUserId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MessageView = {
  /**
   * Serializes MessageView to protobuf.
   */
  encode: function (msg: Partial<MessageView>): Uint8Array {
    return MessageView._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes MessageView from protobuf.
   */
  decode: function (bytes: ByteSource): MessageView {
    return MessageView._readMessage(
      MessageView.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MessageView with all fields set to their default value.
   */
  initialize: function (): MessageView {
    return {
      message: Message.initialize(),
      user: User.initialize(),
      parentMessage: MessageView.initialize(),
      quotedMessage: MessageView.initialize(),
      threadParticipants: [],
      mentionedUsers: [],
      latestReactions: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageView>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.message) {
      writer.writeMessage(1, msg.message, Message._writeMessage);
    }
    if (msg.user) {
      writer.writeMessage(2, msg.user, User._writeMessage);
    }
    if (msg.parentMessage) {
      writer.writeMessage(3, msg.parentMessage, MessageView._writeMessage);
    }
    if (msg.quotedMessage) {
      writer.writeMessage(4, msg.quotedMessage, MessageView._writeMessage);
    }
    if (msg.threadParticipants?.length) {
      writer.writeRepeatedMessage(
        5,
        msg.threadParticipants as any,
        User._writeMessage
      );
    }
    if (msg.mentionedUsers?.length) {
      writer.writeRepeatedMessage(
        6,
        msg.mentionedUsers as any,
        User._writeMessage
      );
    }
    if (msg.latestReactions) {
      writer.writeRepeatedMessage(
        7,
        Object.entries(msg.latestReactions).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        MessageView.LatestReactions._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MessageView, reader: BinaryReader): MessageView {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.message, Message._readMessage);
          break;
        }
        case 2: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        case 3: {
          reader.readMessage(msg.parentMessage, MessageView._readMessage);
          break;
        }
        case 4: {
          reader.readMessage(msg.quotedMessage, MessageView._readMessage);
          break;
        }
        case 5: {
          const m = User.initialize();
          reader.readMessage(m, User._readMessage);
          msg.threadParticipants.push(m);
          break;
        }
        case 6: {
          const m = User.initialize();
          reader.readMessage(m, User._readMessage);
          msg.mentionedUsers.push(m);
          break;
        }
        case 7: {
          const map = {} as MessageView.LatestReactions;
          reader.readMessage(map, MessageView.LatestReactions._readMessage);
          msg.latestReactions[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  LatestReactions: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<MessageView.LatestReactions>,
      writer: BinaryWriter
    ): BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeMessage(2, msg.value, ReactionViews._writeMessage);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MessageView.LatestReactions,
      reader: BinaryReader
    ): MessageView.LatestReactions {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = ReactionViews.initialize();
            reader.readMessage(msg.value, ReactionViews._readMessage);
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const Messages = {
  /**
   * Serializes Messages to protobuf.
   */
  encode: function (msg: Partial<Messages>): Uint8Array {
    return Messages._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Messages from protobuf.
   */
  decode: function (bytes: ByteSource): Messages {
    return Messages._readMessage(
      Messages.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Messages with all fields set to their default value.
   */
  initialize: function (): Messages {
    return {
      messages: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Messages>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messages?.length) {
      writer.writeRepeatedMessage(
        1,
        msg.messages as any,
        Message._writeMessage
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Messages, reader: BinaryReader): Messages {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          const m = Message.initialize();
          reader.readMessage(m, Message._readMessage);
          msg.messages.push(m);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MessageAttachment = {
  /**
   * Serializes MessageAttachment to protobuf.
   */
  encode: function (msg: Partial<MessageAttachment>): Uint8Array {
    return MessageAttachment._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes MessageAttachment from protobuf.
   */
  decode: function (bytes: ByteSource): MessageAttachment {
    return MessageAttachment._readMessage(
      MessageAttachment.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MessageAttachment with all fields set to their default value.
   */
  initialize: function (): MessageAttachment {
    return {
      type: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageAttachment>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.type) {
      writer.writeString(1, msg.type);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageAttachment,
    reader: BinaryReader
  ): MessageAttachment {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.type = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MessageInput = {
  /**
   * Serializes MessageInput to protobuf.
   */
  encode: function (msg: Partial<MessageInput>): Uint8Array {
    return MessageInput._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes MessageInput from protobuf.
   */
  decode: function (bytes: ByteSource): MessageInput {
    return MessageInput._readMessage(
      MessageInput.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MessageInput with all fields set to their default value.
   */
  initialize: function (): MessageInput {
    return {
      id: "",
      channelCid: "",
      text: "",
      parentMessageId: "",
      showInChannel: false,
      quotedMessageId: "",
      pinned: false,
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
      silent: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageInput>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.channelCid) {
      writer.writeString(3, msg.channelCid);
    }
    if (msg.text) {
      writer.writeString(4, msg.text);
    }
    if (msg.parentMessageId) {
      writer.writeString(5, msg.parentMessageId);
    }
    if (msg.showInChannel) {
      writer.writeBool(6, msg.showInChannel);
    }
    if (msg.quotedMessageId) {
      writer.writeString(7, msg.quotedMessageId);
    }
    if (msg.pinned) {
      writer.writeBool(8, msg.pinned);
    }
    if (msg.pinnedAt) {
      writer.writeMessage(9, msg.pinnedAt, Timestamp._writeMessage);
    }
    if (msg.pinExpiresAt) {
      writer.writeMessage(10, msg.pinExpiresAt, Timestamp._writeMessage);
    }
    if (msg.silent) {
      writer.writeBool(11, msg.silent);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageInput,
    reader: BinaryReader
  ): MessageInput {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 3: {
          msg.channelCid = reader.readString();
          break;
        }
        case 4: {
          msg.text = reader.readString();
          break;
        }
        case 5: {
          msg.parentMessageId = reader.readString();
          break;
        }
        case 6: {
          msg.showInChannel = reader.readBool();
          break;
        }
        case 7: {
          msg.quotedMessageId = reader.readString();
          break;
        }
        case 8: {
          msg.pinned = reader.readBool();
          break;
        }
        case 9: {
          reader.readMessage(msg.pinnedAt, Timestamp._readMessage);
          break;
        }
        case 10: {
          reader.readMessage(msg.pinExpiresAt, Timestamp._readMessage);
          break;
        }
        case 11: {
          msg.silent = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MessageSendClientSideView = {
  /**
   * Serializes MessageSendClientSideView to protobuf.
   */
  encode: function (msg: Partial<MessageSendClientSideView>): Uint8Array {
    return MessageSendClientSideView._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes MessageSendClientSideView from protobuf.
   */
  decode: function (bytes: ByteSource): MessageSendClientSideView {
    return MessageSendClientSideView._readMessage(
      MessageSendClientSideView.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MessageSendClientSideView with all fields set to their default value.
   */
  initialize: function (): MessageSendClientSideView {
    return {
      id: "",
      channelCid: "",
      text: "",
      parentMessageId: "",
      showInChannel: false,
      quotedMessageId: "",
      pinned: false,
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
      silent: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageSendClientSideView>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeString(1, msg.id);
    }
    if (msg.channelCid) {
      writer.writeString(3, msg.channelCid);
    }
    if (msg.text) {
      writer.writeString(4, msg.text);
    }
    if (msg.parentMessageId) {
      writer.writeString(5, msg.parentMessageId);
    }
    if (msg.showInChannel) {
      writer.writeBool(6, msg.showInChannel);
    }
    if (msg.quotedMessageId) {
      writer.writeString(7, msg.quotedMessageId);
    }
    if (msg.pinned) {
      writer.writeBool(8, msg.pinned);
    }
    if (msg.pinnedAt) {
      writer.writeMessage(9, msg.pinnedAt, Timestamp._writeMessage);
    }
    if (msg.pinExpiresAt) {
      writer.writeMessage(10, msg.pinExpiresAt, Timestamp._writeMessage);
    }
    if (msg.silent) {
      writer.writeBool(11, msg.silent);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageSendClientSideView,
    reader: BinaryReader
  ): MessageSendClientSideView {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = reader.readString();
          break;
        }
        case 3: {
          msg.channelCid = reader.readString();
          break;
        }
        case 4: {
          msg.text = reader.readString();
          break;
        }
        case 5: {
          msg.parentMessageId = reader.readString();
          break;
        }
        case 6: {
          msg.showInChannel = reader.readBool();
          break;
        }
        case 7: {
          msg.quotedMessageId = reader.readString();
          break;
        }
        case 8: {
          msg.pinned = reader.readBool();
          break;
        }
        case 9: {
          reader.readMessage(msg.pinnedAt, Timestamp._readMessage);
          break;
        }
        case 10: {
          reader.readMessage(msg.pinExpiresAt, Timestamp._readMessage);
          break;
        }
        case 11: {
          msg.silent = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const MessageSendServerSideView = {
  /**
   * Serializes MessageSendServerSideView to protobuf.
   */
  encode: function (msg: Partial<MessageSendServerSideView>): Uint8Array {
    return MessageSendServerSideView._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes MessageSendServerSideView from protobuf.
   */
  decode: function (bytes: ByteSource): MessageSendServerSideView {
    return MessageSendServerSideView._readMessage(
      MessageSendServerSideView.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes MessageSendServerSideView with all fields set to their default value.
   */
  initialize: function (): MessageSendServerSideView {
    return {
      message: MessageSendClientSideView.initialize(),
      mml: "",
      userId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageSendServerSideView>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.message) {
      writer.writeMessage(
        1,
        msg.message,
        MessageSendClientSideView._writeMessage
      );
    }
    if (msg.mml) {
      writer.writeString(2, msg.mml);
    }
    if (msg.userId) {
      writer.writeString(3, msg.userId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageSendServerSideView,
    reader: BinaryReader
  ): MessageSendServerSideView {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(
            msg.message,
            MessageSendClientSideView._readMessage
          );
          break;
        }
        case 2: {
          msg.mml = reader.readString();
          break;
        }
        case 3: {
          msg.userId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendMessageRequest = {
  /**
   * Serializes SendMessageRequest to protobuf.
   */
  encode: function (msg: Partial<SendMessageRequest>): Uint8Array {
    return SendMessageRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SendMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SendMessageRequest {
    return SendMessageRequest._readMessage(
      SendMessageRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SendMessageRequest with all fields set to their default value.
   */
  initialize: function (): SendMessageRequest {
    return {
      clientSideMessage: undefined,
      serverSideMessage: undefined,
      skipPush: false,
      skipEnrichUrl: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendMessageRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.clientSideMessage != undefined) {
      writer.writeMessage(
        1,
        msg.clientSideMessage,
        MessageSendClientSideView._writeMessage
      );
    }
    if (msg.serverSideMessage != undefined) {
      writer.writeMessage(
        2,
        msg.serverSideMessage,
        MessageSendServerSideView._writeMessage
      );
    }
    if (msg.skipPush) {
      writer.writeBool(3, msg.skipPush);
    }
    if (msg.skipEnrichUrl) {
      writer.writeBool(4, msg.skipEnrichUrl);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessageRequest,
    reader: BinaryReader
  ): SendMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.clientSideMessage = MessageSendClientSideView.initialize();
          reader.readMessage(
            msg.clientSideMessage,
            MessageSendClientSideView._readMessage
          );
          break;
        }
        case 2: {
          msg.serverSideMessage = MessageSendServerSideView.initialize();
          reader.readMessage(
            msg.serverSideMessage,
            MessageSendServerSideView._readMessage
          );
          break;
        }
        case 3: {
          msg.skipPush = reader.readBool();
          break;
        }
        case 4: {
          msg.skipEnrichUrl = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SendMessageResponse = {
  /**
   * Serializes SendMessageResponse to protobuf.
   */
  encode: function (msg: Partial<SendMessageResponse>): Uint8Array {
    return SendMessageResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SendMessageResponse from protobuf.
   */
  decode: function (bytes: ByteSource): SendMessageResponse {
    return SendMessageResponse._readMessage(
      SendMessageResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SendMessageResponse with all fields set to their default value.
   */
  initialize: function (): SendMessageResponse {
    return {
      message: Message.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendMessageResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.message) {
      writer.writeMessage(1, msg.message, Message._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessageResponse,
    reader: BinaryReader
  ): SendMessageResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.message, Message._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMessageRequest = {
  /**
   * Serializes GetMessageRequest to protobuf.
   */
  encode: function (msg: Partial<GetMessageRequest>): Uint8Array {
    return GetMessageRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetMessageRequest {
    return GetMessageRequest._readMessage(
      GetMessageRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetMessageRequest with all fields set to their default value.
   */
  initialize: function (): GetMessageRequest {
    return {
      channelCid: "",
      messageId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessageRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.channelCid) {
      writer.writeString(1, msg.channelCid);
    }
    if (msg.messageId) {
      writer.writeString(2, msg.messageId);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessageRequest,
    reader: BinaryReader
  ): GetMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.channelCid = reader.readString();
          break;
        }
        case 2: {
          msg.messageId = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMessageResponse = {
  /**
   * Serializes GetMessageResponse to protobuf.
   */
  encode: function (msg: Partial<GetMessageResponse>): Uint8Array {
    return GetMessageResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMessageResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetMessageResponse {
    return GetMessageResponse._readMessage(
      GetMessageResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetMessageResponse with all fields set to their default value.
   */
  initialize: function (): GetMessageResponse {
    return {
      message: Message.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessageResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.message) {
      writer.writeMessage(1, msg.message, Message._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessageResponse,
    reader: BinaryReader
  ): GetMessageResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.message, Message._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMessagesRequest = {
  /**
   * Serializes GetMessagesRequest to protobuf.
   */
  encode: function (msg: Partial<GetMessagesRequest>): Uint8Array {
    return GetMessagesRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMessagesRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetMessagesRequest {
    return GetMessagesRequest._readMessage(
      GetMessagesRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetMessagesRequest with all fields set to their default value.
   */
  initialize: function (): GetMessagesRequest {
    return {
      messageIds: [],
      channelCid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessagesRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messageIds?.length) {
      writer.writeRepeatedString(1, msg.messageIds);
    }
    if (msg.channelCid) {
      writer.writeString(2, msg.channelCid);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessagesRequest,
    reader: BinaryReader
  ): GetMessagesRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.messageIds.push(reader.readString());
          break;
        }
        case 2: {
          msg.channelCid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetMessagesResponse = {
  /**
   * Serializes GetMessagesResponse to protobuf.
   */
  encode: function (msg: Partial<GetMessagesResponse>): Uint8Array {
    return GetMessagesResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetMessagesResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetMessagesResponse {
    return GetMessagesResponse._readMessage(
      GetMessagesResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetMessagesResponse with all fields set to their default value.
   */
  initialize: function (): GetMessagesResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessagesResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messages) {
      writer.writeMessage(1, msg.messages, Messages._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessagesResponse,
    reader: BinaryReader
  ): GetMessagesResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.messages, Messages._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteMessageRequest = {
  /**
   * Serializes DeleteMessageRequest to protobuf.
   */
  encode: function (msg: Partial<DeleteMessageRequest>): Uint8Array {
    return DeleteMessageRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteMessageRequest {
    return DeleteMessageRequest._readMessage(
      DeleteMessageRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes DeleteMessageRequest with all fields set to their default value.
   */
  initialize: function (): DeleteMessageRequest {
    return {
      messageId: "",
      channelCid: "",
      hard: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<DeleteMessageRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messageId) {
      writer.writeString(1, msg.messageId);
    }
    if (msg.channelCid) {
      writer.writeString(2, msg.channelCid);
    }
    if (msg.hard) {
      writer.writeBool(3, msg.hard);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMessageRequest,
    reader: BinaryReader
  ): DeleteMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.messageId = reader.readString();
          break;
        }
        case 2: {
          msg.channelCid = reader.readString();
          break;
        }
        case 3: {
          msg.hard = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const DeleteMessageResponse = {
  /**
   * Serializes DeleteMessageResponse to protobuf.
   */
  encode: function (msg: Partial<DeleteMessageResponse>): Uint8Array {
    return DeleteMessageResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes DeleteMessageResponse from protobuf.
   */
  decode: function (bytes: ByteSource): DeleteMessageResponse {
    return DeleteMessageResponse._readMessage(
      DeleteMessageResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes DeleteMessageResponse with all fields set to their default value.
   */
  initialize: function (): DeleteMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<DeleteMessageResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messages) {
      writer.writeMessage(1, msg.messages, Messages._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMessageResponse,
    reader: BinaryReader
  ): DeleteMessageResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.messages, Messages._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateMessageRequest = {
  /**
   * Serializes UpdateMessageRequest to protobuf.
   */
  encode: function (msg: Partial<UpdateMessageRequest>): Uint8Array {
    return UpdateMessageRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateMessageRequest {
    return UpdateMessageRequest._readMessage(
      UpdateMessageRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UpdateMessageRequest with all fields set to their default value.
   */
  initialize: function (): UpdateMessageRequest {
    return {
      skipEnrichUrl: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateMessageRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.skipEnrichUrl) {
      writer.writeBool(4, msg.skipEnrichUrl);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMessageRequest,
    reader: BinaryReader
  ): UpdateMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 4: {
          msg.skipEnrichUrl = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateMessageResponse = {
  /**
   * Serializes UpdateMessageResponse to protobuf.
   */
  encode: function (msg: Partial<UpdateMessageResponse>): Uint8Array {
    return UpdateMessageResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateMessageResponse from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateMessageResponse {
    return UpdateMessageResponse._readMessage(
      UpdateMessageResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UpdateMessageResponse with all fields set to their default value.
   */
  initialize: function (): UpdateMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateMessageResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messages) {
      writer.writeMessage(1, msg.messages, Messages._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMessageResponse,
    reader: BinaryReader
  ): UpdateMessageResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.messages, Messages._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PinMessageRequest = {
  /**
   * Serializes PinMessageRequest to protobuf.
   */
  encode: function (msg: Partial<PinMessageRequest>): Uint8Array {
    return PinMessageRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PinMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): PinMessageRequest {
    return PinMessageRequest._readMessage(
      PinMessageRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PinMessageRequest with all fields set to their default value.
   */
  initialize: function (): PinMessageRequest {
    return {
      messageId: "",
      channelCid: "",
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PinMessageRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messageId) {
      writer.writeString(1, msg.messageId);
    }
    if (msg.channelCid) {
      writer.writeString(2, msg.channelCid);
    }
    if (msg.pinnedAt) {
      writer.writeMessage(3, msg.pinnedAt, Timestamp._writeMessage);
    }
    if (msg.pinExpiresAt) {
      writer.writeMessage(4, msg.pinExpiresAt, Timestamp._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PinMessageRequest,
    reader: BinaryReader
  ): PinMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.messageId = reader.readString();
          break;
        }
        case 2: {
          msg.channelCid = reader.readString();
          break;
        }
        case 3: {
          reader.readMessage(msg.pinnedAt, Timestamp._readMessage);
          break;
        }
        case 4: {
          reader.readMessage(msg.pinExpiresAt, Timestamp._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const PinMessageResponse = {
  /**
   * Serializes PinMessageResponse to protobuf.
   */
  encode: function (msg: Partial<PinMessageResponse>): Uint8Array {
    return PinMessageResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes PinMessageResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PinMessageResponse {
    return PinMessageResponse._readMessage(
      PinMessageResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes PinMessageResponse with all fields set to their default value.
   */
  initialize: function (): PinMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PinMessageResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messages) {
      writer.writeMessage(1, msg.messages, Messages._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PinMessageResponse,
    reader: BinaryReader
  ): PinMessageResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.messages, Messages._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UnpinMessageRequest = {
  /**
   * Serializes UnpinMessageRequest to protobuf.
   */
  encode: function (msg: Partial<UnpinMessageRequest>): Uint8Array {
    return UnpinMessageRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UnpinMessageRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UnpinMessageRequest {
    return UnpinMessageRequest._readMessage(
      UnpinMessageRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UnpinMessageRequest with all fields set to their default value.
   */
  initialize: function (): UnpinMessageRequest {
    return {
      messageId: "",
      channelCid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UnpinMessageRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messageId) {
      writer.writeString(1, msg.messageId);
    }
    if (msg.channelCid) {
      writer.writeString(2, msg.channelCid);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UnpinMessageRequest,
    reader: BinaryReader
  ): UnpinMessageRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.messageId = reader.readString();
          break;
        }
        case 2: {
          msg.channelCid = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UnpinMessageResponse = {
  /**
   * Serializes UnpinMessageResponse to protobuf.
   */
  encode: function (msg: Partial<UnpinMessageResponse>): Uint8Array {
    return UnpinMessageResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UnpinMessageResponse from protobuf.
   */
  decode: function (bytes: ByteSource): UnpinMessageResponse {
    return UnpinMessageResponse._readMessage(
      UnpinMessageResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UnpinMessageResponse with all fields set to their default value.
   */
  initialize: function (): UnpinMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UnpinMessageResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.messages) {
      writer.writeMessage(1, msg.messages, Messages._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UnpinMessageResponse,
    reader: BinaryReader
  ): UnpinMessageResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.messages, Messages._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const MessageTypeJSON = {
  MESSAGE_TYPE_UNSPECIFIED: "MESSAGE_TYPE_UNSPECIFIED",
  /**
   * A regular message
   */
  MESSAGE_TYPE_REGULAR: "MESSAGE_TYPE_REGULAR",
  /**
   * A temporary message which is only delivered to one user
   */
  MESSAGE_TYPE_EPHEMERAL: "MESSAGE_TYPE_EPHEMERAL",
  /**
   * An error message which occurs as the result of a failed command
   */
  MESSAGE_TYPE_ERROR: "MESSAGE_TYPE_ERROR",
  /**
   * A reply in a thread
   */
  MESSAGE_TYPE_REPLY: "MESSAGE_TYPE_REPLY",
  /**
   * A message generated by a system event
   */
  MESSAGE_TYPE_SYSTEM: "MESSAGE_TYPE_SYSTEM",
  /**
   * A soft deleted message
   */
  MESSAGE_TYPE_DELETED: "MESSAGE_TYPE_DELETED",
  /**
   * @private
   */
  _fromInt: function (i: number): MessageType {
    switch (i) {
      case 0: {
        return "MESSAGE_TYPE_UNSPECIFIED";
      }
      case 1: {
        return "MESSAGE_TYPE_REGULAR";
      }
      case 2: {
        return "MESSAGE_TYPE_EPHEMERAL";
      }
      case 3: {
        return "MESSAGE_TYPE_ERROR";
      }
      case 4: {
        return "MESSAGE_TYPE_REPLY";
      }
      case 5: {
        return "MESSAGE_TYPE_SYSTEM";
      }
      case 6: {
        return "MESSAGE_TYPE_DELETED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as MessageType;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: MessageType): number {
    switch (i) {
      case "MESSAGE_TYPE_UNSPECIFIED": {
        return 0;
      }
      case "MESSAGE_TYPE_REGULAR": {
        return 1;
      }
      case "MESSAGE_TYPE_EPHEMERAL": {
        return 2;
      }
      case "MESSAGE_TYPE_ERROR": {
        return 3;
      }
      case "MESSAGE_TYPE_REPLY": {
        return 4;
      }
      case "MESSAGE_TYPE_SYSTEM": {
        return 5;
      }
      case "MESSAGE_TYPE_DELETED": {
        return 6;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const MessageJSON = {
  /**
   * Serializes Message to JSON.
   */
  encode: function (msg: Partial<Message>): string {
    return JSON.stringify(MessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes Message from JSON.
   */
  decode: function (json: string): Message {
    return MessageJSON._readMessage(MessageJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Message with all fields set to their default value.
   */
  initialize: function (): Message {
    return {
      id: "",
      channelCid: "",
      type: MessageType._fromInt(0),
      userId: "",
      text: "",
      mml: "",
      html: "",
      i18n: {},
      custom: new Uint8Array(),
      attachments: [],
      commandName: "",
      createdAt: Timestamp.initialize(),
      updatedAt: Timestamp.initialize(),
      deletedAt: Timestamp.initialize(),
      parentMessageId: "",
      showInChannel: false,
      replyCount: 0n,
      quotedMessageId: "",
      silent: false,
      pinned: MessagePin.initialize(),
      threadParticipantUserIds: [],
      mentionedUserIds: [],
      reactionCounts: {},
      reactionScores: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Message>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    if (msg.type && MessageTypeJSON._toInt(msg.type)) {
      json.type = msg.type;
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    if (msg.text) {
      json.text = msg.text;
    }
    if (msg.mml) {
      json.mml = msg.mml;
    }
    if (msg.html) {
      json.html = msg.html;
    }
    if (msg.i18n) {
      const i18n = Object.fromEntries(
        Object.entries(msg.i18n)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageJSON.I18n._writeMessage)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(i18n).length > 0) {
        json.i18n = i18n;
      }
    }
    if (msg.custom?.length) {
      json.custom = encodeBase64Bytes(msg.custom);
    }
    if (msg.attachments?.length) {
      json.attachments = msg.attachments.map(
        MessageAttachmentJSON._writeMessage
      );
    }
    if (msg.commandName) {
      json.commandName = msg.commandName;
    }
    if (msg.createdAt) {
      const createdAt = TimestampJSON._writeMessage(msg.createdAt);
      if (Object.keys(createdAt).length > 0) {
        json.createdAt = createdAt;
      }
    }
    if (msg.updatedAt) {
      const updatedAt = TimestampJSON._writeMessage(msg.updatedAt);
      if (Object.keys(updatedAt).length > 0) {
        json.updatedAt = updatedAt;
      }
    }
    if (msg.deletedAt) {
      const deletedAt = TimestampJSON._writeMessage(msg.deletedAt);
      if (Object.keys(deletedAt).length > 0) {
        json.deletedAt = deletedAt;
      }
    }
    if (msg.parentMessageId) {
      json.parentMessageId = msg.parentMessageId;
    }
    if (msg.showInChannel) {
      json.showInChannel = msg.showInChannel;
    }
    if (msg.replyCount) {
      json.replyCount = msg.replyCount.toString();
    }
    if (msg.quotedMessageId) {
      json.quotedMessageId = msg.quotedMessageId;
    }
    if (msg.silent) {
      json.silent = msg.silent;
    }
    if (msg.pinned) {
      const pinned = MessagePinJSON._writeMessage(msg.pinned);
      if (Object.keys(pinned).length > 0) {
        json.pinned = pinned;
      }
    }
    if (msg.threadParticipantUserIds?.length) {
      json.threadParticipantUserIds = msg.threadParticipantUserIds;
    }
    if (msg.mentionedUserIds?.length) {
      json.mentionedUserIds = msg.mentionedUserIds;
    }
    if (msg.reactionCounts) {
      const reactionCounts = Object.fromEntries(
        Object.entries(msg.reactionCounts)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageJSON.ReactionCounts._writeMessage)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(reactionCounts).length > 0) {
        json.reactionCounts = reactionCounts;
      }
    }
    if (msg.reactionScores) {
      const reactionScores = Object.fromEntries(
        Object.entries(msg.reactionScores)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageJSON.ReactionScores._writeMessage)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(reactionScores).length > 0) {
        json.reactionScores = reactionScores;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Message, json: any): Message {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    const _type = json.type;
    if (_type) {
      msg.type = _type;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    const _text = json.text;
    if (_text) {
      msg.text = _text;
    }
    const _mml = json.mml;
    if (_mml) {
      msg.mml = _mml;
    }
    const _html = json.html;
    if (_html) {
      msg.html = _html;
    }
    const _i18n = json.i18n;
    if (_i18n) {
      msg.i18n = Object.fromEntries(
        Object.entries(_i18n)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageJSON.I18n._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    const _custom = json.custom;
    if (_custom) {
      msg.custom = decodeBase64Bytes(_custom);
    }
    const _attachments = json.attachments;
    if (_attachments) {
      for (const item of _attachments) {
        const m = MessageAttachment.initialize();
        MessageAttachmentJSON._readMessage(m, item);
        msg.attachments.push(m);
      }
    }
    const _commandName = json.commandName ?? json.command_name;
    if (_commandName) {
      msg.commandName = _commandName;
    }
    const _createdAt = json.createdAt ?? json.created_at;
    if (_createdAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _createdAt);
      msg.createdAt = m;
    }
    const _updatedAt = json.updatedAt ?? json.updated_at;
    if (_updatedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _updatedAt);
      msg.updatedAt = m;
    }
    const _deletedAt = json.deletedAt ?? json.deleted_at;
    if (_deletedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _deletedAt);
      msg.deletedAt = m;
    }
    const _parentMessageId = json.parentMessageId ?? json.parent_message_id;
    if (_parentMessageId) {
      msg.parentMessageId = _parentMessageId;
    }
    const _showInChannel = json.showInChannel ?? json.show_in_channel;
    if (_showInChannel) {
      msg.showInChannel = _showInChannel;
    }
    const _replyCount = json.replyCount ?? json.reply_count;
    if (_replyCount) {
      msg.replyCount = BigInt(_replyCount);
    }
    const _quotedMessageId = json.quotedMessageId ?? json.quoted_message_id;
    if (_quotedMessageId) {
      msg.quotedMessageId = _quotedMessageId;
    }
    const _silent = json.silent;
    if (_silent) {
      msg.silent = _silent;
    }
    const _pinned = json.pinned;
    if (_pinned) {
      const m = MessagePin.initialize();
      MessagePinJSON._readMessage(m, _pinned);
      msg.pinned = m;
    }
    const _threadParticipantUserIds =
      json.threadParticipantUserIds ?? json.thread_participant_user_ids;
    if (_threadParticipantUserIds) {
      msg.threadParticipantUserIds = _threadParticipantUserIds;
    }
    const _mentionedUserIds = json.mentionedUserIds ?? json.mentioned_user_ids;
    if (_mentionedUserIds) {
      msg.mentionedUserIds = _mentionedUserIds;
    }
    const _reactionCounts = json.reactionCounts ?? json.reaction_counts;
    if (_reactionCounts) {
      msg.reactionCounts = Object.fromEntries(
        Object.entries(_reactionCounts)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageJSON.ReactionCounts._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    const _reactionScores = json.reactionScores ?? json.reaction_scores;
    if (_reactionScores) {
      msg.reactionScores = Object.fromEntries(
        Object.entries(_reactionScores)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageJSON.ReactionScores._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    return msg;
  },

  I18n: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Message.I18n>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json.key = msg.key;
      }
      if (msg.value) {
        json.value = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (msg: Message.I18n, json: any): Message.I18n {
      const _key = json.key;
      if (_key) {
        msg.key = _key;
      }
      const _value = json.value;
      if (_value) {
        msg.value = _value;
      }
      return msg;
    },
  },

  ReactionCounts: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Message.ReactionCounts>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json.key = msg.key;
      }
      if (msg.value) {
        json.value = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Message.ReactionCounts,
      json: any
    ): Message.ReactionCounts {
      const _key = json.key;
      if (_key) {
        msg.key = _key;
      }
      const _value = json.value;
      if (_value) {
        msg.value = BigInt(_value);
      }
      return msg;
    },
  },

  ReactionScores: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<Message.ReactionScores>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json.key = msg.key;
      }
      if (msg.value) {
        json.value = msg.value.toString();
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: Message.ReactionScores,
      json: any
    ): Message.ReactionScores {
      const _key = json.key;
      if (_key) {
        msg.key = _key;
      }
      const _value = json.value;
      if (_value) {
        msg.value = BigInt(_value);
      }
      return msg;
    },
  },
};

export const MessagePinJSON = {
  /**
   * Serializes MessagePin to JSON.
   */
  encode: function (msg: Partial<MessagePin>): string {
    return JSON.stringify(MessagePinJSON._writeMessage(msg));
  },

  /**
   * Deserializes MessagePin from JSON.
   */
  decode: function (json: string): MessagePin {
    return MessagePinJSON._readMessage(
      MessagePinJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MessagePin with all fields set to their default value.
   */
  initialize: function (): MessagePin {
    return {
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
      pinnedByUserId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<MessagePin>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.pinnedAt) {
      const pinnedAt = TimestampJSON._writeMessage(msg.pinnedAt);
      if (Object.keys(pinnedAt).length > 0) {
        json.pinnedAt = pinnedAt;
      }
    }
    if (msg.pinExpiresAt) {
      const pinExpiresAt = TimestampJSON._writeMessage(msg.pinExpiresAt);
      if (Object.keys(pinExpiresAt).length > 0) {
        json.pinExpiresAt = pinExpiresAt;
      }
    }
    if (msg.pinnedByUserId) {
      json.pinnedByUserId = msg.pinnedByUserId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MessagePin, json: any): MessagePin {
    const _pinnedAt = json.pinnedAt ?? json.pinned_at;
    if (_pinnedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinnedAt);
      msg.pinnedAt = m;
    }
    const _pinExpiresAt = json.pinExpiresAt ?? json.pin_expires_at;
    if (_pinExpiresAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinExpiresAt);
      msg.pinExpiresAt = m;
    }
    const _pinnedByUserId = json.pinnedByUserId ?? json.pinned_by_user_id;
    if (_pinnedByUserId) {
      msg.pinnedByUserId = _pinnedByUserId;
    }
    return msg;
  },
};

export const MessageViewJSON = {
  /**
   * Serializes MessageView to JSON.
   */
  encode: function (msg: Partial<MessageView>): string {
    return JSON.stringify(MessageViewJSON._writeMessage(msg));
  },

  /**
   * Deserializes MessageView from JSON.
   */
  decode: function (json: string): MessageView {
    return MessageViewJSON._readMessage(
      MessageViewJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MessageView with all fields set to their default value.
   */
  initialize: function (): MessageView {
    return {
      message: Message.initialize(),
      user: User.initialize(),
      parentMessage: MessageView.initialize(),
      quotedMessage: MessageView.initialize(),
      threadParticipants: [],
      mentionedUsers: [],
      latestReactions: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<MessageView>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.message) {
      const message = MessageJSON._writeMessage(msg.message);
      if (Object.keys(message).length > 0) {
        json.message = message;
      }
    }
    if (msg.user) {
      const user = UserJSON._writeMessage(msg.user);
      if (Object.keys(user).length > 0) {
        json.user = user;
      }
    }
    if (msg.parentMessage) {
      const parentMessage = MessageViewJSON._writeMessage(msg.parentMessage);
      if (Object.keys(parentMessage).length > 0) {
        json.parentMessage = parentMessage;
      }
    }
    if (msg.quotedMessage) {
      const quotedMessage = MessageViewJSON._writeMessage(msg.quotedMessage);
      if (Object.keys(quotedMessage).length > 0) {
        json.quotedMessage = quotedMessage;
      }
    }
    if (msg.threadParticipants?.length) {
      json.threadParticipants = msg.threadParticipants.map(
        UserJSON._writeMessage
      );
    }
    if (msg.mentionedUsers?.length) {
      json.mentionedUsers = msg.mentionedUsers.map(UserJSON._writeMessage);
    }
    if (msg.latestReactions) {
      const latestReactions = Object.fromEntries(
        Object.entries(msg.latestReactions)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageViewJSON.LatestReactions._writeMessage)
          .map(({ key, value }) => [key, value])
      );
      if (Object.keys(latestReactions).length > 0) {
        json.latestReactions = latestReactions;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MessageView, json: any): MessageView {
    const _message = json.message;
    if (_message) {
      const m = Message.initialize();
      MessageJSON._readMessage(m, _message);
      msg.message = m;
    }
    const _user = json.user;
    if (_user) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user);
      msg.user = m;
    }
    const _parentMessage = json.parentMessage ?? json.parent_message;
    if (_parentMessage) {
      const m = MessageView.initialize();
      MessageViewJSON._readMessage(m, _parentMessage);
      msg.parentMessage = m;
    }
    const _quotedMessage = json.quotedMessage ?? json.quoted_message;
    if (_quotedMessage) {
      const m = MessageView.initialize();
      MessageViewJSON._readMessage(m, _quotedMessage);
      msg.quotedMessage = m;
    }
    const _threadParticipants =
      json.threadParticipants ?? json.thread_participants;
    if (_threadParticipants) {
      for (const item of _threadParticipants) {
        const m = User.initialize();
        UserJSON._readMessage(m, item);
        msg.threadParticipants.push(m);
      }
    }
    const _mentionedUsers = json.mentionedUsers ?? json.mentioned_users;
    if (_mentionedUsers) {
      for (const item of _mentionedUsers) {
        const m = User.initialize();
        UserJSON._readMessage(m, item);
        msg.mentionedUsers.push(m);
      }
    }
    const _latestReactions = json.latestReactions ?? json.latest_reactions;
    if (_latestReactions) {
      msg.latestReactions = Object.fromEntries(
        Object.entries(_latestReactions)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(MessageViewJSON.LatestReactions._readMessage)
          .map(({ key, value }) => [key, value])
      );
    }
    return msg;
  },

  LatestReactions: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: Partial<MessageView.LatestReactions>
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json.key = msg.key;
      }
      if (msg.value) {
        const value = ReactionViewsJSON._writeMessage(msg.value);
        if (Object.keys(value).length > 0) {
          json.value = value;
        }
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: MessageView.LatestReactions,
      json: any
    ): MessageView.LatestReactions {
      const _key = json.key;
      if (_key) {
        msg.key = _key;
      }
      const _value = json.value;
      if (_value) {
        const m = ReactionViews.initialize();
        ReactionViewsJSON._readMessage(m, _value);
        msg.value = m;
      }
      return msg;
    },
  },
};

export const MessagesJSON = {
  /**
   * Serializes Messages to JSON.
   */
  encode: function (msg: Partial<Messages>): string {
    return JSON.stringify(MessagesJSON._writeMessage(msg));
  },

  /**
   * Deserializes Messages from JSON.
   */
  decode: function (json: string): Messages {
    return MessagesJSON._readMessage(
      MessagesJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Messages with all fields set to their default value.
   */
  initialize: function (): Messages {
    return {
      messages: [],
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Messages>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messages?.length) {
      json.messages = msg.messages.map(MessageJSON._writeMessage);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Messages, json: any): Messages {
    const _messages = json.messages;
    if (_messages) {
      for (const item of _messages) {
        const m = Message.initialize();
        MessageJSON._readMessage(m, item);
        msg.messages.push(m);
      }
    }
    return msg;
  },
};

export const MessageAttachmentJSON = {
  /**
   * Serializes MessageAttachment to JSON.
   */
  encode: function (msg: Partial<MessageAttachment>): string {
    return JSON.stringify(MessageAttachmentJSON._writeMessage(msg));
  },

  /**
   * Deserializes MessageAttachment from JSON.
   */
  decode: function (json: string): MessageAttachment {
    return MessageAttachmentJSON._readMessage(
      MessageAttachmentJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MessageAttachment with all fields set to their default value.
   */
  initialize: function (): MessageAttachment {
    return {
      type: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageAttachment>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.type) {
      json.type = msg.type;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageAttachment,
    json: any
  ): MessageAttachment {
    const _type = json.type;
    if (_type) {
      msg.type = _type;
    }
    return msg;
  },
};

export const MessageInputJSON = {
  /**
   * Serializes MessageInput to JSON.
   */
  encode: function (msg: Partial<MessageInput>): string {
    return JSON.stringify(MessageInputJSON._writeMessage(msg));
  },

  /**
   * Deserializes MessageInput from JSON.
   */
  decode: function (json: string): MessageInput {
    return MessageInputJSON._readMessage(
      MessageInputJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MessageInput with all fields set to their default value.
   */
  initialize: function (): MessageInput {
    return {
      id: "",
      channelCid: "",
      text: "",
      parentMessageId: "",
      showInChannel: false,
      quotedMessageId: "",
      pinned: false,
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
      silent: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageInput>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    if (msg.text) {
      json.text = msg.text;
    }
    if (msg.parentMessageId) {
      json.parentMessageId = msg.parentMessageId;
    }
    if (msg.showInChannel) {
      json.showInChannel = msg.showInChannel;
    }
    if (msg.quotedMessageId) {
      json.quotedMessageId = msg.quotedMessageId;
    }
    if (msg.pinned) {
      json.pinned = msg.pinned;
    }
    if (msg.pinnedAt) {
      const pinnedAt = TimestampJSON._writeMessage(msg.pinnedAt);
      if (Object.keys(pinnedAt).length > 0) {
        json.pinnedAt = pinnedAt;
      }
    }
    if (msg.pinExpiresAt) {
      const pinExpiresAt = TimestampJSON._writeMessage(msg.pinExpiresAt);
      if (Object.keys(pinExpiresAt).length > 0) {
        json.pinExpiresAt = pinExpiresAt;
      }
    }
    if (msg.silent) {
      json.silent = msg.silent;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: MessageInput, json: any): MessageInput {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    const _text = json.text;
    if (_text) {
      msg.text = _text;
    }
    const _parentMessageId = json.parentMessageId ?? json.parent_message_id;
    if (_parentMessageId) {
      msg.parentMessageId = _parentMessageId;
    }
    const _showInChannel = json.showInChannel ?? json.show_in_channel;
    if (_showInChannel) {
      msg.showInChannel = _showInChannel;
    }
    const _quotedMessageId = json.quotedMessageId ?? json.quoted_message_id;
    if (_quotedMessageId) {
      msg.quotedMessageId = _quotedMessageId;
    }
    const _pinned = json.pinned;
    if (_pinned) {
      msg.pinned = _pinned;
    }
    const _pinnedAt = json.pinnedAt ?? json.pinned_at;
    if (_pinnedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinnedAt);
      msg.pinnedAt = m;
    }
    const _pinExpiresAt = json.pinExpiresAt ?? json.pin_expires_at;
    if (_pinExpiresAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinExpiresAt);
      msg.pinExpiresAt = m;
    }
    const _silent = json.silent;
    if (_silent) {
      msg.silent = _silent;
    }
    return msg;
  },
};

export const MessageSendClientSideViewJSON = {
  /**
   * Serializes MessageSendClientSideView to JSON.
   */
  encode: function (msg: Partial<MessageSendClientSideView>): string {
    return JSON.stringify(MessageSendClientSideViewJSON._writeMessage(msg));
  },

  /**
   * Deserializes MessageSendClientSideView from JSON.
   */
  decode: function (json: string): MessageSendClientSideView {
    return MessageSendClientSideViewJSON._readMessage(
      MessageSendClientSideViewJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MessageSendClientSideView with all fields set to their default value.
   */
  initialize: function (): MessageSendClientSideView {
    return {
      id: "",
      channelCid: "",
      text: "",
      parentMessageId: "",
      showInChannel: false,
      quotedMessageId: "",
      pinned: false,
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
      silent: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageSendClientSideView>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json.id = msg.id;
    }
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    if (msg.text) {
      json.text = msg.text;
    }
    if (msg.parentMessageId) {
      json.parentMessageId = msg.parentMessageId;
    }
    if (msg.showInChannel) {
      json.showInChannel = msg.showInChannel;
    }
    if (msg.quotedMessageId) {
      json.quotedMessageId = msg.quotedMessageId;
    }
    if (msg.pinned) {
      json.pinned = msg.pinned;
    }
    if (msg.pinnedAt) {
      const pinnedAt = TimestampJSON._writeMessage(msg.pinnedAt);
      if (Object.keys(pinnedAt).length > 0) {
        json.pinnedAt = pinnedAt;
      }
    }
    if (msg.pinExpiresAt) {
      const pinExpiresAt = TimestampJSON._writeMessage(msg.pinExpiresAt);
      if (Object.keys(pinExpiresAt).length > 0) {
        json.pinExpiresAt = pinExpiresAt;
      }
    }
    if (msg.silent) {
      json.silent = msg.silent;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageSendClientSideView,
    json: any
  ): MessageSendClientSideView {
    const _id = json.id;
    if (_id) {
      msg.id = _id;
    }
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    const _text = json.text;
    if (_text) {
      msg.text = _text;
    }
    const _parentMessageId = json.parentMessageId ?? json.parent_message_id;
    if (_parentMessageId) {
      msg.parentMessageId = _parentMessageId;
    }
    const _showInChannel = json.showInChannel ?? json.show_in_channel;
    if (_showInChannel) {
      msg.showInChannel = _showInChannel;
    }
    const _quotedMessageId = json.quotedMessageId ?? json.quoted_message_id;
    if (_quotedMessageId) {
      msg.quotedMessageId = _quotedMessageId;
    }
    const _pinned = json.pinned;
    if (_pinned) {
      msg.pinned = _pinned;
    }
    const _pinnedAt = json.pinnedAt ?? json.pinned_at;
    if (_pinnedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinnedAt);
      msg.pinnedAt = m;
    }
    const _pinExpiresAt = json.pinExpiresAt ?? json.pin_expires_at;
    if (_pinExpiresAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinExpiresAt);
      msg.pinExpiresAt = m;
    }
    const _silent = json.silent;
    if (_silent) {
      msg.silent = _silent;
    }
    return msg;
  },
};

export const MessageSendServerSideViewJSON = {
  /**
   * Serializes MessageSendServerSideView to JSON.
   */
  encode: function (msg: Partial<MessageSendServerSideView>): string {
    return JSON.stringify(MessageSendServerSideViewJSON._writeMessage(msg));
  },

  /**
   * Deserializes MessageSendServerSideView from JSON.
   */
  decode: function (json: string): MessageSendServerSideView {
    return MessageSendServerSideViewJSON._readMessage(
      MessageSendServerSideViewJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes MessageSendServerSideView with all fields set to their default value.
   */
  initialize: function (): MessageSendServerSideView {
    return {
      message: MessageSendClientSideView.initialize(),
      mml: "",
      userId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<MessageSendServerSideView>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.message) {
      const message = MessageSendClientSideViewJSON._writeMessage(msg.message);
      if (Object.keys(message).length > 0) {
        json.message = message;
      }
    }
    if (msg.mml) {
      json.mml = msg.mml;
    }
    if (msg.userId) {
      json.userId = msg.userId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: MessageSendServerSideView,
    json: any
  ): MessageSendServerSideView {
    const _message = json.message;
    if (_message) {
      const m = MessageSendClientSideView.initialize();
      MessageSendClientSideViewJSON._readMessage(m, _message);
      msg.message = m;
    }
    const _mml = json.mml;
    if (_mml) {
      msg.mml = _mml;
    }
    const _userId = json.userId ?? json.user_id;
    if (_userId) {
      msg.userId = _userId;
    }
    return msg;
  },
};

export const SendMessageRequestJSON = {
  /**
   * Serializes SendMessageRequest to JSON.
   */
  encode: function (msg: Partial<SendMessageRequest>): string {
    return JSON.stringify(SendMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendMessageRequest from JSON.
   */
  decode: function (json: string): SendMessageRequest {
    return SendMessageRequestJSON._readMessage(
      SendMessageRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SendMessageRequest with all fields set to their default value.
   */
  initialize: function (): SendMessageRequest {
    return {
      clientSideMessage: undefined,
      serverSideMessage: undefined,
      skipPush: false,
      skipEnrichUrl: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendMessageRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.clientSideMessage != undefined) {
      const clientSideMessage = MessageSendClientSideViewJSON._writeMessage(
        msg.clientSideMessage
      );
      json.clientSideMessage = clientSideMessage;
    }
    if (msg.serverSideMessage != undefined) {
      const serverSideMessage = MessageSendServerSideViewJSON._writeMessage(
        msg.serverSideMessage
      );
      json.serverSideMessage = serverSideMessage;
    }
    if (msg.skipPush) {
      json.skipPush = msg.skipPush;
    }
    if (msg.skipEnrichUrl) {
      json.skipEnrichUrl = msg.skipEnrichUrl;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessageRequest,
    json: any
  ): SendMessageRequest {
    const _clientSideMessage =
      json.clientSideMessage ?? json.client_side_message;
    if (_clientSideMessage) {
      const m = MessageSendClientSideView.initialize();
      MessageSendClientSideViewJSON._readMessage(m, _clientSideMessage);
      msg.clientSideMessage = m;
    }
    const _serverSideMessage =
      json.serverSideMessage ?? json.server_side_message;
    if (_serverSideMessage) {
      const m = MessageSendServerSideView.initialize();
      MessageSendServerSideViewJSON._readMessage(m, _serverSideMessage);
      msg.serverSideMessage = m;
    }
    const _skipPush = json.skipPush ?? json.skip_push;
    if (_skipPush) {
      msg.skipPush = _skipPush;
    }
    const _skipEnrichUrl = json.skipEnrichUrl ?? json.skip_enrich_url;
    if (_skipEnrichUrl) {
      msg.skipEnrichUrl = _skipEnrichUrl;
    }
    return msg;
  },
};

export const SendMessageResponseJSON = {
  /**
   * Serializes SendMessageResponse to JSON.
   */
  encode: function (msg: Partial<SendMessageResponse>): string {
    return JSON.stringify(SendMessageResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SendMessageResponse from JSON.
   */
  decode: function (json: string): SendMessageResponse {
    return SendMessageResponseJSON._readMessage(
      SendMessageResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SendMessageResponse with all fields set to their default value.
   */
  initialize: function (): SendMessageResponse {
    return {
      message: Message.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SendMessageResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.message) {
      const message = MessageJSON._writeMessage(msg.message);
      if (Object.keys(message).length > 0) {
        json.message = message;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SendMessageResponse,
    json: any
  ): SendMessageResponse {
    const _message = json.message;
    if (_message) {
      const m = Message.initialize();
      MessageJSON._readMessage(m, _message);
      msg.message = m;
    }
    return msg;
  },
};

export const GetMessageRequestJSON = {
  /**
   * Serializes GetMessageRequest to JSON.
   */
  encode: function (msg: Partial<GetMessageRequest>): string {
    return JSON.stringify(GetMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMessageRequest from JSON.
   */
  decode: function (json: string): GetMessageRequest {
    return GetMessageRequestJSON._readMessage(
      GetMessageRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetMessageRequest with all fields set to their default value.
   */
  initialize: function (): GetMessageRequest {
    return {
      channelCid: "",
      messageId: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessageRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    if (msg.messageId) {
      json.messageId = msg.messageId;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessageRequest,
    json: any
  ): GetMessageRequest {
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    const _messageId = json.messageId ?? json.message_id;
    if (_messageId) {
      msg.messageId = _messageId;
    }
    return msg;
  },
};

export const GetMessageResponseJSON = {
  /**
   * Serializes GetMessageResponse to JSON.
   */
  encode: function (msg: Partial<GetMessageResponse>): string {
    return JSON.stringify(GetMessageResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMessageResponse from JSON.
   */
  decode: function (json: string): GetMessageResponse {
    return GetMessageResponseJSON._readMessage(
      GetMessageResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetMessageResponse with all fields set to their default value.
   */
  initialize: function (): GetMessageResponse {
    return {
      message: Message.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessageResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.message) {
      const message = MessageJSON._writeMessage(msg.message);
      if (Object.keys(message).length > 0) {
        json.message = message;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessageResponse,
    json: any
  ): GetMessageResponse {
    const _message = json.message;
    if (_message) {
      const m = Message.initialize();
      MessageJSON._readMessage(m, _message);
      msg.message = m;
    }
    return msg;
  },
};

export const GetMessagesRequestJSON = {
  /**
   * Serializes GetMessagesRequest to JSON.
   */
  encode: function (msg: Partial<GetMessagesRequest>): string {
    return JSON.stringify(GetMessagesRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMessagesRequest from JSON.
   */
  decode: function (json: string): GetMessagesRequest {
    return GetMessagesRequestJSON._readMessage(
      GetMessagesRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetMessagesRequest with all fields set to their default value.
   */
  initialize: function (): GetMessagesRequest {
    return {
      messageIds: [],
      channelCid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessagesRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messageIds?.length) {
      json.messageIds = msg.messageIds;
    }
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessagesRequest,
    json: any
  ): GetMessagesRequest {
    const _messageIds = json.messageIds ?? json.message_ids;
    if (_messageIds) {
      msg.messageIds = _messageIds;
    }
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    return msg;
  },
};

export const GetMessagesResponseJSON = {
  /**
   * Serializes GetMessagesResponse to JSON.
   */
  encode: function (msg: Partial<GetMessagesResponse>): string {
    return JSON.stringify(GetMessagesResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetMessagesResponse from JSON.
   */
  decode: function (json: string): GetMessagesResponse {
    return GetMessagesResponseJSON._readMessage(
      GetMessagesResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetMessagesResponse with all fields set to their default value.
   */
  initialize: function (): GetMessagesResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetMessagesResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messages) {
      const messages = MessagesJSON._writeMessage(msg.messages);
      if (Object.keys(messages).length > 0) {
        json.messages = messages;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetMessagesResponse,
    json: any
  ): GetMessagesResponse {
    const _messages = json.messages;
    if (_messages) {
      const m = Messages.initialize();
      MessagesJSON._readMessage(m, _messages);
      msg.messages = m;
    }
    return msg;
  },
};

export const DeleteMessageRequestJSON = {
  /**
   * Serializes DeleteMessageRequest to JSON.
   */
  encode: function (msg: Partial<DeleteMessageRequest>): string {
    return JSON.stringify(DeleteMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteMessageRequest from JSON.
   */
  decode: function (json: string): DeleteMessageRequest {
    return DeleteMessageRequestJSON._readMessage(
      DeleteMessageRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes DeleteMessageRequest with all fields set to their default value.
   */
  initialize: function (): DeleteMessageRequest {
    return {
      messageId: "",
      channelCid: "",
      hard: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<DeleteMessageRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messageId) {
      json.messageId = msg.messageId;
    }
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    if (msg.hard) {
      json.hard = msg.hard;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMessageRequest,
    json: any
  ): DeleteMessageRequest {
    const _messageId = json.messageId ?? json.message_id;
    if (_messageId) {
      msg.messageId = _messageId;
    }
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    const _hard = json.hard;
    if (_hard) {
      msg.hard = _hard;
    }
    return msg;
  },
};

export const DeleteMessageResponseJSON = {
  /**
   * Serializes DeleteMessageResponse to JSON.
   */
  encode: function (msg: Partial<DeleteMessageResponse>): string {
    return JSON.stringify(DeleteMessageResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes DeleteMessageResponse from JSON.
   */
  decode: function (json: string): DeleteMessageResponse {
    return DeleteMessageResponseJSON._readMessage(
      DeleteMessageResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes DeleteMessageResponse with all fields set to their default value.
   */
  initialize: function (): DeleteMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<DeleteMessageResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messages) {
      const messages = MessagesJSON._writeMessage(msg.messages);
      if (Object.keys(messages).length > 0) {
        json.messages = messages;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: DeleteMessageResponse,
    json: any
  ): DeleteMessageResponse {
    const _messages = json.messages;
    if (_messages) {
      const m = Messages.initialize();
      MessagesJSON._readMessage(m, _messages);
      msg.messages = m;
    }
    return msg;
  },
};

export const UpdateMessageRequestJSON = {
  /**
   * Serializes UpdateMessageRequest to JSON.
   */
  encode: function (msg: Partial<UpdateMessageRequest>): string {
    return JSON.stringify(UpdateMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateMessageRequest from JSON.
   */
  decode: function (json: string): UpdateMessageRequest {
    return UpdateMessageRequestJSON._readMessage(
      UpdateMessageRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UpdateMessageRequest with all fields set to their default value.
   */
  initialize: function (): UpdateMessageRequest {
    return {
      skipEnrichUrl: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateMessageRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.skipEnrichUrl) {
      json.skipEnrichUrl = msg.skipEnrichUrl;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMessageRequest,
    json: any
  ): UpdateMessageRequest {
    const _skipEnrichUrl = json.skipEnrichUrl ?? json.skip_enrich_url;
    if (_skipEnrichUrl) {
      msg.skipEnrichUrl = _skipEnrichUrl;
    }
    return msg;
  },
};

export const UpdateMessageResponseJSON = {
  /**
   * Serializes UpdateMessageResponse to JSON.
   */
  encode: function (msg: Partial<UpdateMessageResponse>): string {
    return JSON.stringify(UpdateMessageResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateMessageResponse from JSON.
   */
  decode: function (json: string): UpdateMessageResponse {
    return UpdateMessageResponseJSON._readMessage(
      UpdateMessageResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UpdateMessageResponse with all fields set to their default value.
   */
  initialize: function (): UpdateMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateMessageResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messages) {
      const messages = MessagesJSON._writeMessage(msg.messages);
      if (Object.keys(messages).length > 0) {
        json.messages = messages;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateMessageResponse,
    json: any
  ): UpdateMessageResponse {
    const _messages = json.messages;
    if (_messages) {
      const m = Messages.initialize();
      MessagesJSON._readMessage(m, _messages);
      msg.messages = m;
    }
    return msg;
  },
};

export const PinMessageRequestJSON = {
  /**
   * Serializes PinMessageRequest to JSON.
   */
  encode: function (msg: Partial<PinMessageRequest>): string {
    return JSON.stringify(PinMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes PinMessageRequest from JSON.
   */
  decode: function (json: string): PinMessageRequest {
    return PinMessageRequestJSON._readMessage(
      PinMessageRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PinMessageRequest with all fields set to their default value.
   */
  initialize: function (): PinMessageRequest {
    return {
      messageId: "",
      channelCid: "",
      pinnedAt: Timestamp.initialize(),
      pinExpiresAt: Timestamp.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PinMessageRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messageId) {
      json.messageId = msg.messageId;
    }
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    if (msg.pinnedAt) {
      const pinnedAt = TimestampJSON._writeMessage(msg.pinnedAt);
      if (Object.keys(pinnedAt).length > 0) {
        json.pinnedAt = pinnedAt;
      }
    }
    if (msg.pinExpiresAt) {
      const pinExpiresAt = TimestampJSON._writeMessage(msg.pinExpiresAt);
      if (Object.keys(pinExpiresAt).length > 0) {
        json.pinExpiresAt = pinExpiresAt;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PinMessageRequest,
    json: any
  ): PinMessageRequest {
    const _messageId = json.messageId ?? json.message_id;
    if (_messageId) {
      msg.messageId = _messageId;
    }
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    const _pinnedAt = json.pinnedAt ?? json.pinned_at;
    if (_pinnedAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinnedAt);
      msg.pinnedAt = m;
    }
    const _pinExpiresAt = json.pinExpiresAt ?? json.pin_expires_at;
    if (_pinExpiresAt) {
      const m = Timestamp.initialize();
      TimestampJSON._readMessage(m, _pinExpiresAt);
      msg.pinExpiresAt = m;
    }
    return msg;
  },
};

export const PinMessageResponseJSON = {
  /**
   * Serializes PinMessageResponse to JSON.
   */
  encode: function (msg: Partial<PinMessageResponse>): string {
    return JSON.stringify(PinMessageResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes PinMessageResponse from JSON.
   */
  decode: function (json: string): PinMessageResponse {
    return PinMessageResponseJSON._readMessage(
      PinMessageResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes PinMessageResponse with all fields set to their default value.
   */
  initialize: function (): PinMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<PinMessageResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messages) {
      const messages = MessagesJSON._writeMessage(msg.messages);
      if (Object.keys(messages).length > 0) {
        json.messages = messages;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: PinMessageResponse,
    json: any
  ): PinMessageResponse {
    const _messages = json.messages;
    if (_messages) {
      const m = Messages.initialize();
      MessagesJSON._readMessage(m, _messages);
      msg.messages = m;
    }
    return msg;
  },
};

export const UnpinMessageRequestJSON = {
  /**
   * Serializes UnpinMessageRequest to JSON.
   */
  encode: function (msg: Partial<UnpinMessageRequest>): string {
    return JSON.stringify(UnpinMessageRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UnpinMessageRequest from JSON.
   */
  decode: function (json: string): UnpinMessageRequest {
    return UnpinMessageRequestJSON._readMessage(
      UnpinMessageRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UnpinMessageRequest with all fields set to their default value.
   */
  initialize: function (): UnpinMessageRequest {
    return {
      messageId: "",
      channelCid: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UnpinMessageRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messageId) {
      json.messageId = msg.messageId;
    }
    if (msg.channelCid) {
      json.channelCid = msg.channelCid;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UnpinMessageRequest,
    json: any
  ): UnpinMessageRequest {
    const _messageId = json.messageId ?? json.message_id;
    if (_messageId) {
      msg.messageId = _messageId;
    }
    const _channelCid = json.channelCid ?? json.channel_cid;
    if (_channelCid) {
      msg.channelCid = _channelCid;
    }
    return msg;
  },
};

export const UnpinMessageResponseJSON = {
  /**
   * Serializes UnpinMessageResponse to JSON.
   */
  encode: function (msg: Partial<UnpinMessageResponse>): string {
    return JSON.stringify(UnpinMessageResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes UnpinMessageResponse from JSON.
   */
  decode: function (json: string): UnpinMessageResponse {
    return UnpinMessageResponseJSON._readMessage(
      UnpinMessageResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UnpinMessageResponse with all fields set to their default value.
   */
  initialize: function (): UnpinMessageResponse {
    return {
      messages: Messages.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UnpinMessageResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.messages) {
      const messages = MessagesJSON._writeMessage(msg.messages);
      if (Object.keys(messages).length > 0) {
        json.messages = messages;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UnpinMessageResponse,
    json: any
  ): UnpinMessageResponse {
    const _messages = json.messages;
    if (_messages) {
      const m = Messages.initialize();
      MessagesJSON._readMessage(m, _messages);
      msg.messages = m;
    }
    return msg;
  },
};
