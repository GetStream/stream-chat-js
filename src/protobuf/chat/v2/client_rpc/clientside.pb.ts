// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: chat/v2/client_rpc/clientside.proto
/* eslint-disable */

import type { ClientConfiguration } from "twirpscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

import {
  GetChannelRequest,
  GetChannelRequestJSON,
  GetChannelResponse,
  GetChannelResponseJSON,
  QueryChannelRequest,
  QueryChannelRequestJSON,
  QueryChannelResponse,
  QueryChannelResponseJSON,
} from "./channel.pb";

//========================================//
//   ClientChatService Protobuf Client    //
//========================================//

/**
 * Get or create a channel.
 * If the channel does not exist, it will be created. but if it does, it will be returned.
 */
export async function GetChannel(
  getChannelRequest: GetChannelRequest,
  config?: ClientConfiguration
): Promise<GetChannelResponse> {
  const response = await PBrequest(
    "/stream.chat.v2.client_rpc.ClientChatService/GetChannel",
    GetChannelRequest.encode(getChannelRequest),
    config
  );
  return GetChannelResponse.decode(response);
}

/**
 * Query channels.
 * Returns a list of channels that match the query parameters.
 * TODO: rename to QueryChannels
 */
export async function QueryChannel(
  queryChannelRequest: QueryChannelRequest,
  config?: ClientConfiguration
): Promise<QueryChannelResponse> {
  const response = await PBrequest(
    "/stream.chat.v2.client_rpc.ClientChatService/QueryChannel",
    QueryChannelRequest.encode(queryChannelRequest),
    config
  );
  return QueryChannelResponse.decode(response);
}

//========================================//
//     ClientChatService JSON Client      //
//========================================//

/**
 * Get or create a channel.
 * If the channel does not exist, it will be created. but if it does, it will be returned.
 */
export async function GetChannelJSON(
  getChannelRequest: GetChannelRequest,
  config?: ClientConfiguration
): Promise<GetChannelResponse> {
  const response = await JSONrequest(
    "/stream.chat.v2.client_rpc.ClientChatService/GetChannel",
    GetChannelRequestJSON.encode(getChannelRequest),
    config
  );
  return GetChannelResponseJSON.decode(response);
}

/**
 * Query channels.
 * Returns a list of channels that match the query parameters.
 * TODO: rename to QueryChannels
 */
export async function QueryChannelJSON(
  queryChannelRequest: QueryChannelRequest,
  config?: ClientConfiguration
): Promise<QueryChannelResponse> {
  const response = await JSONrequest(
    "/stream.chat.v2.client_rpc.ClientChatService/QueryChannel",
    QueryChannelRequestJSON.encode(queryChannelRequest),
    config
  );
  return QueryChannelResponseJSON.decode(response);
}

//========================================//
//           ClientChatService            //
//========================================//

export interface ClientChatService<Context = unknown> {
  /**
   * Get or create a channel.
   * If the channel does not exist, it will be created. but if it does, it will be returned.
   */
  GetChannel: (
    getChannelRequest: GetChannelRequest,
    context: Context
  ) => Promise<GetChannelResponse> | GetChannelResponse;
  /**
   * Query channels.
   * Returns a list of channels that match the query parameters.
   * TODO: rename to QueryChannels
   */
  QueryChannel: (
    queryChannelRequest: QueryChannelRequest,
    context: Context
  ) => Promise<QueryChannelResponse> | QueryChannelResponse;
}

export function createClientChatService<Context>(
  service: ClientChatService<Context>
) {
  return {
    name: "stream.chat.v2.client_rpc.ClientChatService",
    methods: {
      GetChannel: {
        name: "GetChannel",
        handler: service.GetChannel,
        input: { protobuf: GetChannelRequest, json: GetChannelRequestJSON },
        output: { protobuf: GetChannelResponse, json: GetChannelResponseJSON },
      },
      QueryChannel: {
        name: "QueryChannel",
        handler: service.QueryChannel,
        input: { protobuf: QueryChannelRequest, json: QueryChannelRequestJSON },
        output: {
          protobuf: QueryChannelResponse,
          json: QueryChannelResponseJSON,
        },
      },
    },
  } as const;
}
