// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: chat/v2/error.proto
/* eslint-disable */

//========================================//
//                 Types                  //
//========================================//

export type ErrorCode =
  | "ERROR_CODE_UNSPECIFIED"
  | "ERROR_CODE_VALIDATION"
  | "ERROR_CODE_INTERNAL"
  | "ERROR_CODE_ACCESS_KEY"
  | "ERROR_CODE_AUTH"
  | "ERROR_CODE_DUPLICATE_USERNAME"
  | "ERROR_CODE_RATELIMITED"
  | "ERROR_CODE_NOTFOUND"
  | "ERROR_CODE_NOT_ALLOWED"
  | "ERROR_CODE_EVENT_NOT_SUPPORTED"
  | "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED"
  | "ERROR_CODE_MESSAGE_TOO_LONG"
  | "ERROR_CODE_MULTIPLE_NESTING_LEVEL"
  | "ERROR_CODE_PAYLOAD_TOO_BIG"
  | "ERROR_CODE_TOKEN_EXPIRED"
  | "ERROR_CODE_TOKEN_INVALID_YET"
  | "ERROR_CODE_TOKEN_USED_BEFORE_IAT"
  | "ERROR_CODE_TOKEN_INVALID_SIGNATURE"
  | "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING"
  | "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR"
  | "ERROR_CODE_CONNECTION_ID_NOT_FOUND"
  | "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET"
  | "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH"
  | "ERROR_CODE_TOO_MANY_CONNECTIONS"
  | "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1"
  | "ERROR_CODE_MODERATION_FAILED"
  | "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED"
  | "ERROR_CODE_INVALID_CALL_ID"
  | "ERROR_CODE_VIDEO_CREATE_CALL_FAILED"
  | "ERROR_CODE_APP_SUSPENDED";

export type ValidationErrorCode =
  | "VALIDATION_ERROR_CODE_UNSPECIFIED"
  | "VALIDATION_ERROR_CODE_REQUIRED";

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const ErrorCode = {
  /**
   * It is unknown why the request failed.
   * Normally, It's not possible to get this error.
   * Unknown error.
   */
  ERROR_CODE_UNSPECIFIED: "ERROR_CODE_UNSPECIFIED",
  /**
   * This error carries additional metadata with fields that failed validation
   * Each failed field has both error message and error code specific to failed validator
   * Mapping:
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_VALIDATION: "ERROR_CODE_VALIDATION",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_INTERNAL: "ERROR_CODE_INTERNAL",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_ACCESS_KEY: "ERROR_CODE_ACCESS_KEY",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_AUTH: "ERROR_CODE_AUTH",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_DUPLICATE_USERNAME: "ERROR_CODE_DUPLICATE_USERNAME",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_RATELIMITED: "ERROR_CODE_RATELIMITED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_NOTFOUND: "ERROR_CODE_NOTFOUND",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_NOT_ALLOWED: "ERROR_CODE_NOT_ALLOWED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_EVENT_NOT_SUPPORTED: "ERROR_CODE_EVENT_NOT_SUPPORTED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED:
    "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_MESSAGE_TOO_LONG: "ERROR_CODE_MESSAGE_TOO_LONG",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_MULTIPLE_NESTING_LEVEL: "ERROR_CODE_MULTIPLE_NESTING_LEVEL",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_PAYLOAD_TOO_BIG: "ERROR_CODE_PAYLOAD_TOO_BIG",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_EXPIRED: "ERROR_CODE_TOKEN_EXPIRED",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_INVALID_YET: "ERROR_CODE_TOKEN_INVALID_YET",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_USED_BEFORE_IAT: "ERROR_CODE_TOKEN_USED_BEFORE_IAT",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_INVALID_SIGNATURE: "ERROR_CODE_TOKEN_INVALID_SIGNATURE",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING:
    "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR:
    "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_CONNECTION_ID_NOT_FOUND: "ERROR_CODE_CONNECTION_ID_NOT_FOUND",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_COOLDOWN_PERIOD_NOT_MET: "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH:
    "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_TOO_MANY_CONNECTIONS: "ERROR_CODE_TOO_MANY_CONNECTIONS",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1: "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_MODERATION_FAILED: "ERROR_CODE_MODERATION_FAILED",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED:
    "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_INVALID_CALL_ID: "ERROR_CODE_INVALID_CALL_ID",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_VIDEO_CREATE_CALL_FAILED: "ERROR_CODE_VIDEO_CREATE_CALL_FAILED",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_APP_SUSPENDED: "ERROR_CODE_APP_SUSPENDED",
  /**
   * @private
   */
  _fromInt: function (i: number): ErrorCode {
    switch (i) {
      case 0: {
        return "ERROR_CODE_UNSPECIFIED";
      }
      case 1: {
        return "ERROR_CODE_VALIDATION";
      }
      case -1: {
        return "ERROR_CODE_INTERNAL";
      }
      case 2: {
        return "ERROR_CODE_ACCESS_KEY";
      }
      case 5: {
        return "ERROR_CODE_AUTH";
      }
      case 6: {
        return "ERROR_CODE_DUPLICATE_USERNAME";
      }
      case 9: {
        return "ERROR_CODE_RATELIMITED";
      }
      case 16: {
        return "ERROR_CODE_NOTFOUND";
      }
      case 17: {
        return "ERROR_CODE_NOT_ALLOWED";
      }
      case 18: {
        return "ERROR_CODE_EVENT_NOT_SUPPORTED";
      }
      case 19: {
        return "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED";
      }
      case 20: {
        return "ERROR_CODE_MESSAGE_TOO_LONG";
      }
      case 21: {
        return "ERROR_CODE_MULTIPLE_NESTING_LEVEL";
      }
      case 22: {
        return "ERROR_CODE_PAYLOAD_TOO_BIG";
      }
      case 40: {
        return "ERROR_CODE_TOKEN_EXPIRED";
      }
      case 41: {
        return "ERROR_CODE_TOKEN_INVALID_YET";
      }
      case 42: {
        return "ERROR_CODE_TOKEN_USED_BEFORE_IAT";
      }
      case 43: {
        return "ERROR_CODE_TOKEN_INVALID_SIGNATURE";
      }
      case 44: {
        return "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING";
      }
      case 45: {
        return "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR";
      }
      case 46: {
        return "ERROR_CODE_CONNECTION_ID_NOT_FOUND";
      }
      case 60: {
        return "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET";
      }
      case 70: {
        return "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH";
      }
      case 71: {
        return "ERROR_CODE_TOO_MANY_CONNECTIONS";
      }
      case 72: {
        return "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1";
      }
      case 73: {
        return "ERROR_CODE_MODERATION_FAILED";
      }
      case 80: {
        return "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED";
      }
      case 81: {
        return "ERROR_CODE_INVALID_CALL_ID";
      }
      case 82: {
        return "ERROR_CODE_VIDEO_CREATE_CALL_FAILED";
      }
      case 99: {
        return "ERROR_CODE_APP_SUSPENDED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as ErrorCode;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: ErrorCode): number {
    switch (i) {
      case "ERROR_CODE_UNSPECIFIED": {
        return 0;
      }
      case "ERROR_CODE_VALIDATION": {
        return 1;
      }
      case "ERROR_CODE_INTERNAL": {
        return -1;
      }
      case "ERROR_CODE_ACCESS_KEY": {
        return 2;
      }
      case "ERROR_CODE_AUTH": {
        return 5;
      }
      case "ERROR_CODE_DUPLICATE_USERNAME": {
        return 6;
      }
      case "ERROR_CODE_RATELIMITED": {
        return 9;
      }
      case "ERROR_CODE_NOTFOUND": {
        return 16;
      }
      case "ERROR_CODE_NOT_ALLOWED": {
        return 17;
      }
      case "ERROR_CODE_EVENT_NOT_SUPPORTED": {
        return 18;
      }
      case "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED": {
        return 19;
      }
      case "ERROR_CODE_MESSAGE_TOO_LONG": {
        return 20;
      }
      case "ERROR_CODE_MULTIPLE_NESTING_LEVEL": {
        return 21;
      }
      case "ERROR_CODE_PAYLOAD_TOO_BIG": {
        return 22;
      }
      case "ERROR_CODE_TOKEN_EXPIRED": {
        return 40;
      }
      case "ERROR_CODE_TOKEN_INVALID_YET": {
        return 41;
      }
      case "ERROR_CODE_TOKEN_USED_BEFORE_IAT": {
        return 42;
      }
      case "ERROR_CODE_TOKEN_INVALID_SIGNATURE": {
        return 43;
      }
      case "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING": {
        return 44;
      }
      case "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR": {
        return 45;
      }
      case "ERROR_CODE_CONNECTION_ID_NOT_FOUND": {
        return 46;
      }
      case "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET": {
        return 60;
      }
      case "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH": {
        return 70;
      }
      case "ERROR_CODE_TOO_MANY_CONNECTIONS": {
        return 71;
      }
      case "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1": {
        return 72;
      }
      case "ERROR_CODE_MODERATION_FAILED": {
        return 73;
      }
      case "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED": {
        return 80;
      }
      case "ERROR_CODE_INVALID_CALL_ID": {
        return 81;
      }
      case "ERROR_CODE_VIDEO_CREATE_CALL_FAILED": {
        return 82;
      }
      case "ERROR_CODE_APP_SUSPENDED": {
        return 99;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const ValidationErrorCode = {
  VALIDATION_ERROR_CODE_UNSPECIFIED: "VALIDATION_ERROR_CODE_UNSPECIFIED",
  VALIDATION_ERROR_CODE_REQUIRED: "VALIDATION_ERROR_CODE_REQUIRED",
  /**
   * @private
   */
  _fromInt: function (i: number): ValidationErrorCode {
    switch (i) {
      case 0: {
        return "VALIDATION_ERROR_CODE_UNSPECIFIED";
      }
      case 1: {
        return "VALIDATION_ERROR_CODE_REQUIRED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as ValidationErrorCode;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: ValidationErrorCode): number {
    switch (i) {
      case "VALIDATION_ERROR_CODE_UNSPECIFIED": {
        return 0;
      }
      case "VALIDATION_ERROR_CODE_REQUIRED": {
        return 1;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const ErrorCodeJSON = {
  /**
   * It is unknown why the request failed.
   * Normally, It's not possible to get this error.
   * Unknown error.
   */
  ERROR_CODE_UNSPECIFIED: "ERROR_CODE_UNSPECIFIED",
  /**
   * This error carries additional metadata with fields that failed validation
   * Each failed field has both error message and error code specific to failed validator
   * Mapping:
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_VALIDATION: "ERROR_CODE_VALIDATION",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_INTERNAL: "ERROR_CODE_INTERNAL",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_ACCESS_KEY: "ERROR_CODE_ACCESS_KEY",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_AUTH: "ERROR_CODE_AUTH",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_DUPLICATE_USERNAME: "ERROR_CODE_DUPLICATE_USERNAME",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_RATELIMITED: "ERROR_CODE_RATELIMITED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_NOTFOUND: "ERROR_CODE_NOTFOUND",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_NOT_ALLOWED: "ERROR_CODE_NOT_ALLOWED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_EVENT_NOT_SUPPORTED: "ERROR_CODE_EVENT_NOT_SUPPORTED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED:
    "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_MESSAGE_TOO_LONG: "ERROR_CODE_MESSAGE_TOO_LONG",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_MULTIPLE_NESTING_LEVEL: "ERROR_CODE_MULTIPLE_NESTING_LEVEL",
  /**
   * * Twirp: ???
   * * HTTP: ???
   */
  ERROR_CODE_PAYLOAD_TOO_BIG: "ERROR_CODE_PAYLOAD_TOO_BIG",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_EXPIRED: "ERROR_CODE_TOKEN_EXPIRED",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_INVALID_YET: "ERROR_CODE_TOKEN_INVALID_YET",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_USED_BEFORE_IAT: "ERROR_CODE_TOKEN_USED_BEFORE_IAT",
  /**
   * * Twirp: unauthenticated
   * * HTTP: 401
   */
  ERROR_CODE_TOKEN_INVALID_SIGNATURE: "ERROR_CODE_TOKEN_INVALID_SIGNATURE",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING:
    "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR:
    "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_CONNECTION_ID_NOT_FOUND: "ERROR_CODE_CONNECTION_ID_NOT_FOUND",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_COOLDOWN_PERIOD_NOT_MET: "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH:
    "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_TOO_MANY_CONNECTIONS: "ERROR_CODE_TOO_MANY_CONNECTIONS",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1: "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_MODERATION_FAILED: "ERROR_CODE_MODERATION_FAILED",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED:
    "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_INVALID_CALL_ID: "ERROR_CODE_INVALID_CALL_ID",
  /**
   * * Twirp: invalid_argument
   * * HTTP: 400
   */
  ERROR_CODE_VIDEO_CREATE_CALL_FAILED: "ERROR_CODE_VIDEO_CREATE_CALL_FAILED",
  /**
   * * Twirp: permission_denied
   * * HTTP: 403
   */
  ERROR_CODE_APP_SUSPENDED: "ERROR_CODE_APP_SUSPENDED",
  /**
   * @private
   */
  _fromInt: function (i: number): ErrorCode {
    switch (i) {
      case 0: {
        return "ERROR_CODE_UNSPECIFIED";
      }
      case 1: {
        return "ERROR_CODE_VALIDATION";
      }
      case -1: {
        return "ERROR_CODE_INTERNAL";
      }
      case 2: {
        return "ERROR_CODE_ACCESS_KEY";
      }
      case 5: {
        return "ERROR_CODE_AUTH";
      }
      case 6: {
        return "ERROR_CODE_DUPLICATE_USERNAME";
      }
      case 9: {
        return "ERROR_CODE_RATELIMITED";
      }
      case 16: {
        return "ERROR_CODE_NOTFOUND";
      }
      case 17: {
        return "ERROR_CODE_NOT_ALLOWED";
      }
      case 18: {
        return "ERROR_CODE_EVENT_NOT_SUPPORTED";
      }
      case 19: {
        return "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED";
      }
      case 20: {
        return "ERROR_CODE_MESSAGE_TOO_LONG";
      }
      case 21: {
        return "ERROR_CODE_MULTIPLE_NESTING_LEVEL";
      }
      case 22: {
        return "ERROR_CODE_PAYLOAD_TOO_BIG";
      }
      case 40: {
        return "ERROR_CODE_TOKEN_EXPIRED";
      }
      case 41: {
        return "ERROR_CODE_TOKEN_INVALID_YET";
      }
      case 42: {
        return "ERROR_CODE_TOKEN_USED_BEFORE_IAT";
      }
      case 43: {
        return "ERROR_CODE_TOKEN_INVALID_SIGNATURE";
      }
      case 44: {
        return "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING";
      }
      case 45: {
        return "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR";
      }
      case 46: {
        return "ERROR_CODE_CONNECTION_ID_NOT_FOUND";
      }
      case 60: {
        return "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET";
      }
      case 70: {
        return "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH";
      }
      case 71: {
        return "ERROR_CODE_TOO_MANY_CONNECTIONS";
      }
      case 72: {
        return "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1";
      }
      case 73: {
        return "ERROR_CODE_MODERATION_FAILED";
      }
      case 80: {
        return "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED";
      }
      case 81: {
        return "ERROR_CODE_INVALID_CALL_ID";
      }
      case 82: {
        return "ERROR_CODE_VIDEO_CREATE_CALL_FAILED";
      }
      case 99: {
        return "ERROR_CODE_APP_SUSPENDED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as ErrorCode;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: ErrorCode): number {
    switch (i) {
      case "ERROR_CODE_UNSPECIFIED": {
        return 0;
      }
      case "ERROR_CODE_VALIDATION": {
        return 1;
      }
      case "ERROR_CODE_INTERNAL": {
        return -1;
      }
      case "ERROR_CODE_ACCESS_KEY": {
        return 2;
      }
      case "ERROR_CODE_AUTH": {
        return 5;
      }
      case "ERROR_CODE_DUPLICATE_USERNAME": {
        return 6;
      }
      case "ERROR_CODE_RATELIMITED": {
        return 9;
      }
      case "ERROR_CODE_NOTFOUND": {
        return 16;
      }
      case "ERROR_CODE_NOT_ALLOWED": {
        return 17;
      }
      case "ERROR_CODE_EVENT_NOT_SUPPORTED": {
        return 18;
      }
      case "ERROR_CODE_CHANNEL_FEATURE_NOT_SUPPORTED": {
        return 19;
      }
      case "ERROR_CODE_MESSAGE_TOO_LONG": {
        return 20;
      }
      case "ERROR_CODE_MULTIPLE_NESTING_LEVEL": {
        return 21;
      }
      case "ERROR_CODE_PAYLOAD_TOO_BIG": {
        return 22;
      }
      case "ERROR_CODE_TOKEN_EXPIRED": {
        return 40;
      }
      case "ERROR_CODE_TOKEN_INVALID_YET": {
        return 41;
      }
      case "ERROR_CODE_TOKEN_USED_BEFORE_IAT": {
        return 42;
      }
      case "ERROR_CODE_TOKEN_INVALID_SIGNATURE": {
        return 43;
      }
      case "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_MISSING": {
        return 44;
      }
      case "ERROR_CODE_CUSTOM_COMMAND_ENDPOINT_CALL_ERROR": {
        return 45;
      }
      case "ERROR_CODE_CONNECTION_ID_NOT_FOUND": {
        return 46;
      }
      case "ERROR_CODE_COOLDOWN_PERIOD_NOT_MET": {
        return 60;
      }
      case "ERROR_CODE_QUERY_CHANNEL_PERMISSIONS_MISMATCH": {
        return 70;
      }
      case "ERROR_CODE_TOO_MANY_CONNECTIONS": {
        return 71;
      }
      case "ERROR_CODE_NOT_SUPPORTED_IN_PUSH_V1": {
        return 72;
      }
      case "ERROR_CODE_MODERATION_FAILED": {
        return 73;
      }
      case "ERROR_CODE_VIDEO_PROVIDER_NOT_CONFIGURED": {
        return 80;
      }
      case "ERROR_CODE_INVALID_CALL_ID": {
        return 81;
      }
      case "ERROR_CODE_VIDEO_CREATE_CALL_FAILED": {
        return 82;
      }
      case "ERROR_CODE_APP_SUSPENDED": {
        return 99;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const ValidationErrorCodeJSON = {
  VALIDATION_ERROR_CODE_UNSPECIFIED: "VALIDATION_ERROR_CODE_UNSPECIFIED",
  VALIDATION_ERROR_CODE_REQUIRED: "VALIDATION_ERROR_CODE_REQUIRED",
  /**
   * @private
   */
  _fromInt: function (i: number): ValidationErrorCode {
    switch (i) {
      case 0: {
        return "VALIDATION_ERROR_CODE_UNSPECIFIED";
      }
      case 1: {
        return "VALIDATION_ERROR_CODE_REQUIRED";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as ValidationErrorCode;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: ValidationErrorCode): number {
    switch (i) {
      case "VALIDATION_ERROR_CODE_UNSPECIFIED": {
        return 0;
      }
      case "VALIDATION_ERROR_CODE_REQUIRED": {
        return 1;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;
