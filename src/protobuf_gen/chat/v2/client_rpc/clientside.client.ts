// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none
// @generated from protobuf file "chat/v2/client_rpc/clientside.proto" (package "stream.chat.v2.client_rpc", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ClientChatService } from "./clientside";
import type { QueryChannelResponse } from "./channel";
import type { QueryChannelRequest } from "./channel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetChannelResponse } from "./channel";
import type { GetChannelRequest } from "./channel";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * ClientSideChatService specific RPC methods.
 * for end-user interactions.
 *
 * @generated from protobuf service stream.chat.v2.client_rpc.ClientChatService
 */
export interface IClientChatServiceClient {
    /**
     * Get or create a channel.
     * If the channel does not exist, it will be created. but if it does, it will be returned.
     *
     * @generated from protobuf rpc: GetChannel(stream.chat.v2.client_rpc.GetChannelRequest) returns (stream.chat.v2.client_rpc.GetChannelResponse);
     */
    getChannel$(input: GetChannelRequest, options?: RpcOptions): UnaryCall<GetChannelRequest, GetChannelResponse>;
    /**
     * Query channels.
     * Returns a list of channels that match the query parameters.
     * TODO: rename to QueryChannels
     *
     * @generated from protobuf rpc: QueryChannel(stream.chat.v2.client_rpc.QueryChannelRequest) returns (stream.chat.v2.client_rpc.QueryChannelResponse);
     */
    queryChannel(input: QueryChannelRequest, options?: RpcOptions): UnaryCall<QueryChannelRequest, QueryChannelResponse>;
}
/**
 * ClientSideChatService specific RPC methods.
 * for end-user interactions.
 *
 * @generated from protobuf service stream.chat.v2.client_rpc.ClientChatService
 */
export class ClientChatServiceClient implements IClientChatServiceClient, ServiceInfo {
    typeName = ClientChatService.typeName;
    methods = ClientChatService.methods;
    options = ClientChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Get or create a channel.
     * If the channel does not exist, it will be created. but if it does, it will be returned.
     *
     * @generated from protobuf rpc: GetChannel(stream.chat.v2.client_rpc.GetChannelRequest) returns (stream.chat.v2.client_rpc.GetChannelResponse);
     */
    getChannel$(input: GetChannelRequest, options?: RpcOptions): UnaryCall<GetChannelRequest, GetChannelResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetChannelRequest, GetChannelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Query channels.
     * Returns a list of channels that match the query parameters.
     * TODO: rename to QueryChannels
     *
     * @generated from protobuf rpc: QueryChannel(stream.chat.v2.client_rpc.QueryChannelRequest) returns (stream.chat.v2.client_rpc.QueryChannelResponse);
     */
    queryChannel(input: QueryChannelRequest, options?: RpcOptions): UnaryCall<QueryChannelRequest, QueryChannelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryChannelRequest, QueryChannelResponse>("unary", this._transport, method, opt, input);
    }
}
