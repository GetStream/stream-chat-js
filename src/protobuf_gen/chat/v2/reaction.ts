// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none
// @generated from protobuf file "chat/v2/reaction.proto" (package "stream.chat.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { User } from "./user";
import { Timestamp } from "../../google/protobuf/timestamp";
import { StringValue } from "../../google/protobuf/wrappers";
/**
 * Message reaction, referenced by the message
 *
 * @generated from protobuf message stream.chat.v2.Reaction
 */
export interface Reaction {
    /**
     * ID of the user who sent the reaction
     *
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * ID of the message the reaction is for
     * message_id will be ommited when reaction is included into Message View or other message related envelopes
     *
     * @generated from protobuf field: google.protobuf.StringValue message_id = 2;
     */
    messageId?: StringValue;
    /**
     * Reaction type (e.g. like, happy, crying)
     *
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * Score of the reaction. Only used for Medium style of reactions (e.g. "+10 claps")
     *
     * @generated from protobuf field: int64 score = 4;
     */
    score: string;
    /**
     * JSON encoded custom data attached to reactions
     *
     * @generated from protobuf field: bytes custom_json = 5;
     */
    customJson: Uint8Array;
    /**
     * Date of reaction creation
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
    /**
     * Date of last reaction update
     *
     * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7;
     */
    updatedAt?: Timestamp;
}
/**
 * A view that contains additional reaction data
 *
 * @generated from protobuf message stream.chat.v2.ReactionView
 */
export interface ReactionView {
    /**
     * The reaction
     *
     * @generated from protobuf field: stream.chat.v2.Reaction reaction = 1;
     */
    reaction?: Reaction;
    /**
     * User who sent the reaction
     *
     * @generated from protobuf field: stream.chat.v2.User user = 2;
     */
    user?: User;
}
/**
 * A collection of reaction views
 *
 * @generated from protobuf message stream.chat.v2.ReactionViews
 */
export interface ReactionViews {
    /**
     * List of reaction views
     *
     * @generated from protobuf field: repeated stream.chat.v2.ReactionView reactions = 1;
     */
    reactions: ReactionView[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Reaction$Type extends MessageType<Reaction> {
    constructor() {
        super("stream.chat.v2.Reaction", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message_id", kind: "message", T: () => StringValue },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "score", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 5, name: "custom_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Reaction>): Reaction {
        const message = { userId: "", type: "", score: "0", customJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Reaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reaction): Reaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* google.protobuf.StringValue message_id */ 2:
                    message.messageId = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.messageId);
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* int64 score */ 4:
                    message.score = reader.int64().toString();
                    break;
                case /* bytes custom_json */ 5:
                    message.customJson = reader.bytes();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* google.protobuf.Timestamp updated_at */ 7:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* google.protobuf.StringValue message_id = 2; */
        if (message.messageId)
            StringValue.internalBinaryWrite(message.messageId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* int64 score = 4; */
        if (message.score !== "0")
            writer.tag(4, WireType.Varint).int64(message.score);
        /* bytes custom_json = 5; */
        if (message.customJson.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.customJson);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp updated_at = 7; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.chat.v2.Reaction
 */
export const Reaction = new Reaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactionView$Type extends MessageType<ReactionView> {
    constructor() {
        super("stream.chat.v2.ReactionView", [
            { no: 1, name: "reaction", kind: "message", T: () => Reaction },
            { no: 2, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<ReactionView>): ReactionView {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactionView>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactionView): ReactionView {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stream.chat.v2.Reaction reaction */ 1:
                    message.reaction = Reaction.internalBinaryRead(reader, reader.uint32(), options, message.reaction);
                    break;
                case /* stream.chat.v2.User user */ 2:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactionView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stream.chat.v2.Reaction reaction = 1; */
        if (message.reaction)
            Reaction.internalBinaryWrite(message.reaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stream.chat.v2.User user = 2; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.chat.v2.ReactionView
 */
export const ReactionView = new ReactionView$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactionViews$Type extends MessageType<ReactionViews> {
    constructor() {
        super("stream.chat.v2.ReactionViews", [
            { no: 1, name: "reactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReactionView }
        ]);
    }
    create(value?: PartialMessage<ReactionViews>): ReactionViews {
        const message = { reactions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReactionViews>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactionViews): ReactionViews {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stream.chat.v2.ReactionView reactions */ 1:
                    message.reactions.push(ReactionView.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactionViews, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stream.chat.v2.ReactionView reactions = 1; */
        for (let i = 0; i < message.reactions.length; i++)
            ReactionView.internalBinaryWrite(message.reactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.chat.v2.ReactionViews
 */
export const ReactionViews = new ReactionViews$Type();
