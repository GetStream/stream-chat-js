// @generated by protobuf-ts 2.7.0 with parameter long_type_string,generate_dependencies,client_generic,server_none
// @generated from protobuf file "chat/v2/utils.proto" (package "stream.chat.v2", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// Instead of using "Pager" for LT, GT style, we can force users to use `mq` instead
// Keep in mind that sort key should match with constraint to make pagination work, although we will probably allow this

// 
// {
// "id": {
// "$lte": "asdsadasd"
// }
// }

/**
 * Pager is used to perform offset based pagination
 * In most cases it shouldn't be used, use MQ to query next page of data
 *
 * @generated from protobuf message stream.chat.v2.Pager
 */
export interface Pager {
    /**
     * @generated from protobuf field: int64 limit = 1;
     */
    limit: string;
    /**
     * @generated from protobuf field: int64 offset = 2;
     */
    offset: string;
}
/**
 * @generated from protobuf message stream.chat.v2.Sort
 */
export interface Sort {
    /**
     * @generated from protobuf field: string field = 1;
     */
    field: string;
    /**
     * @generated from protobuf field: stream.chat.v2.Direction direction = 2;
     */
    direction: Direction;
}
/**
 * @generated from protobuf enum stream.chat.v2.Direction
 */
export enum Direction {
    /**
     * @generated from protobuf enum value: DIRECTION_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: DIRECTION_DESC = -1;
     */
    DESC = -1,
    /**
     * @generated from protobuf enum value: DIRECTION_ASC = 1;
     */
    ASC = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Pager$Type extends MessageType<Pager> {
    constructor() {
        super("stream.chat.v2.Pager", [
            { no: 1, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<Pager>): Pager {
        const message = { limit: "0", offset: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Pager>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pager): Pager {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 limit */ 1:
                    message.limit = reader.int64().toString();
                    break;
                case /* int64 offset */ 2:
                    message.offset = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pager, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 limit = 1; */
        if (message.limit !== "0")
            writer.tag(1, WireType.Varint).int64(message.limit);
        /* int64 offset = 2; */
        if (message.offset !== "0")
            writer.tag(2, WireType.Varint).int64(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.chat.v2.Pager
 */
export const Pager = new Pager$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sort$Type extends MessageType<Sort> {
    constructor() {
        super("stream.chat.v2.Sort", [
            { no: 1, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "direction", kind: "enum", T: () => ["stream.chat.v2.Direction", Direction, "DIRECTION_"] }
        ]);
    }
    create(value?: PartialMessage<Sort>): Sort {
        const message = { field: "", direction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Sort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sort): Sort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string field */ 1:
                    message.field = reader.string();
                    break;
                case /* stream.chat.v2.Direction direction */ 2:
                    message.direction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Sort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string field = 1; */
        if (message.field !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.field);
        /* stream.chat.v2.Direction direction = 2; */
        if (message.direction !== 0)
            writer.tag(2, WireType.Varint).int32(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stream.chat.v2.Sort
 */
export const Sort = new Sort$Type();
